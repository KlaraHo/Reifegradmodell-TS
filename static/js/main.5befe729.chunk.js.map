{"version":3,"sources":["components/img/TU-Wien-Logo.png","components/Introbox.tsx","components/Result.tsx","components/table/TableRow.tsx","components/table/TableRowTargetvalue.tsx","components/table/TableRowAggregation.tsx","components/CSV.tsx","components/table/Table.tsx","components/table/TableMQRow.tsx","components/table/TableMQPerspective.tsx","components/table/TableMQ.tsx","components/Footer.tsx","App.tsx","index.tsx"],"names":["Introbox","style","textAlign","className","float","width","height","marginTop","src","Logo","alt","fontSize","textTransform","Result","props","Fragment","backgroundColor","padding","textDecoration","title","margin","maturityLevel","toFixed","fontStyle","fontWeight","maturityStage","calculateMaturityStage","marginLeft","StarFilled","color","iconColor","colorIcon","overflow","textOverflow","TableRow","Form","useForm","form","React","useState","active","setActive","sum","setSum","useEffect","resetFields","reset","name","tableID","row","toString","display","gridTemplateColumns","columns","length","justifyItems","columnGap","rowGap","onValuesChange","_","values","total","totalWeights","Object","entries","value","Number","isFinite","initialValues","description","sourceInputPlaceholder","Item","valuePropName","checked","onChange","event","target","onActiveChange","map","column","index","rules","required","message","disabled","size","min","max","step","precision","TableRowTargetvalue","rowTitle","type","TableRowAggregation","CSV","justifyContent","marginRight","icon","DownloadOutlined","UploadOutlined","Table","initialSums","i","push","initialSumsRows","rowsCount","initialRowDescriptions","sums","setSums","rowSums","setRowSums","rowDescriptions","setRowDescription","setReset","targetValues","setTargetValues","calculateMetric","totalMetric","forEach","weightedSum","weight","categoriesMetricChart","a","background","sourceTitle","Provider","onFormChange","info","targetValuesForm","forms","formTargetValue","getFieldValue","undefined","totalColumn","totalColumnWeights","formColumnValue","newRowSums","newRowDescriptions","formName","rowColumn","rowColumnWeights","onQualityLevelChange","maturityWeight","Array","from","x","WarningOutlined","okText","cancelText","onConfirm","success","danger","tableLegend","term","shortcut","options","chart","id","xaxis","categories","labels","show","colors","yaxis","forceNiceScale","maxWidth","formatter","val","legend","markers","fillColors","stroke","fill","opacity","hover","plotOptions","radar","polygons","strokeColors","connectorColors","text","resultInitials","series","data","resultTitle","showForSingleSeries","calculateFulfilment","actualValue","targetValue","console","error","TableMQRow","fulfilment","setFulfilment","perspective","gridRow","gridColumn","defaultValueName","defaultValueTarget","isKpiRow","TableMQPerspective","initialMqRowDescriptions","kpiRowCount","piRowCount","initialFulfilment","aggregationSum","setAggregationSum","mqRowDescriptions","setMqRowDescriptions","totalKpi","totalWeightsKpi","sumKpi","totalPi","totalWeightsPi","sumPi","newMqRowDescriptions","newFulfilment","qi","onAggregationChange","marginBottom","onReset","align","TableMQ","aggregationPerspective1","setAggregationPerspective1","aggregationPerspective2","setAggregationPerspective2","aggregationPerspective3","setAggregationPerspective3","aggregationPerspective4","setAggregationPerspective4","mqMetric","setMqMetric","defaultValuePIName","Footer","App","weightedMetricDQ","setWeightedMetricDQ","weightedMetricIQ","setWeightedMetricIQ","weightedMetricKQ","setWeightedMetricKQ","weightedMetricMQ","setWeightedMetricMQ","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5befe729.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/TU-Wien-Logo.8d33c646.png\";","import React from \"react\";\n\nimport Logo from \"./img/TU-Wien-Logo.png\";\n\nimport \"../App.css\";\n\nconst Introbox = () => {\n  return (\n    <>\n      <section style={{ textAlign: \"center\" }}>\n        <div className=\"container\">\n          <div className=\"row\">\n            <img\n              style={{ float: \"left\", width: 200, height: \"auto\", marginTop: \"1rem\" }}\n              src={Logo}\n              alt=\"TU Wien Logo\"\n            />\n          </div>\n\n          <div className=\"row\">\n            <h1 style={{ fontSize: \"4rem\", textTransform: \"uppercase\" }}>Reifegradmodell</h1>\n            <h2 style={{ marginTop: \"1rem\" }}>der Instandhaltung</h2>\n          </div>\n          <div className=\"row\">\n            <p style={{ marginTop: \"3rem\" }}>\n              Mit diesem Tool ist es möglich den unternehmenseigenen Reifegrad der Instandhaltung zu berechnen.\n              <br />\n              Es werden vier Faktoren: Datenqualität D<sub>Q</sub>, Informationsqualität I<sub>Q</sub>, Wissensqualität\n              K<sub>Q</sub> und Instandhaltungsqualität K<sub>Q</sub> zur Berechnung herangezogen. <br />\n              Visuell unterstützt werden die Ergebnisse mit interaktiven Diagrammen.\n            </p>\n          </div>\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default Introbox;\n","import React from \"react\";\nimport { Card } from \"antd\";\nimport { StarFilled } from \"@ant-design/icons\";\n\nconst Result = (props: { maturityLevel: number }) => {\n  const calculateMaturityStage = () => {\n    let maturityStage = \"nicht berechnet\";\n    if (props.maturityLevel <= 0.15) {\n      return (maturityStage = \"I\");\n    } else if (0.15 < props.maturityLevel && props.maturityLevel <= 0.55) {\n      return (maturityStage = \"II\");\n    } else if (0.56 < props.maturityLevel && props.maturityLevel <= 0.86) {\n      return (maturityStage = \"III\");\n    } else if (0.87 < props.maturityLevel && props.maturityLevel <= 1) {\n      return (maturityStage = \"IV\");\n    } else {\n      return maturityStage;\n    }\n  };\n\n  const colorIcon = () => {\n    let iconColor = \"#FFFFFF\";\n    if (props.maturityLevel <= 0.15) {\n      return (iconColor = \"#FF0000\");\n    } else if (0.15 < props.maturityLevel && props.maturityLevel <= 0.55) {\n      return (iconColor = \"#ff8e03\");\n    } else if (0.56 < props.maturityLevel && props.maturityLevel <= 0.86) {\n      return (iconColor = \"#FFE000\");\n    } else if (0.87 < props.maturityLevel && props.maturityLevel <= 1) {\n      return (iconColor = \"#4EEE94\");\n    } else {\n      return iconColor;\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <section style={{ marginTop: 40, textAlign: \"center\", backgroundColor: \"#e6f5ff\", padding: 40 }}>\n        <div className=\"row\">\n          <div>\n            <h1 style={{ fontSize: \"2em\", textTransform: \"uppercase\", textDecoration: \"underline\" }}>Ergebnis</h1>\n          </div>\n          <div>\n            <p>Hier wird der berechnete Reifegrad gemäß Ihrer Angaben aufgeführt.</p>\n          </div>\n          <div style={{ marginTop: 40 }}>\n            <Card title=\"Ihr momentaner Reifegrad\" style={{ width: 300, margin: \"auto\" }}>\n              <p>{(props.maturityLevel * 100).toFixed(2)} %</p>\n              <span style={{ fontStyle: \"italic\", fontWeight: \"bold\", fontSize: 16 }}>\n                Reifegrad {calculateMaturityStage()}\n              </span>\n              <span style={{ marginLeft: 8 }}>\n                <StarFilled style={{ color: colorIcon() }} />\n              </span>\n            </Card>\n            <div style={{ fontSize: 10, overflow: \"hidden\", textOverflow: \"ellipsis\", width: \" 100%\", marginTop: 16 }}>\n              RG I ... 0-15%, RG II ... 16-55%, RG III ... 56-86%, RG IV ... 87-100%\n            </div>\n          </div>\n        </div>\n      </section>\n    </React.Fragment>\n  );\n};\n\nexport default Result;\n","import { Checkbox, Form, Input, InputNumber } from \"antd\";\nimport React from \"react\";\nimport { ITableColumn } from \"./Table\";\n\nexport function TableRow(props: {\n  columns: ITableColumn[];\n  row: number;\n  tableID: string;\n  sourceInputPlaceholder: string;\n  reset: number;\n  onActiveChange?(active: boolean): void;\n}) {\n  const [form] = Form.useForm();\n  const [active, setActive] = React.useState<boolean>(true);\n  const [sum, setSum] = React.useState<number>(0);\n\n  React.useEffect(() => {\n    if (form) {\n      form.resetFields();\n    }\n    setSum(0);\n    setActive(true);\n  }, [form, props.reset]);\n\n  return (\n    <Form\n      form={form}\n      name={props.tableID + \"_\" + props.row.toString()}\n      style={{\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${2 + props.columns.length + 1}, 1fr)`,\n        justifyItems: \"center\",\n        columnGap: 16,\n        rowGap: 16\n      }}\n      onValuesChange={(_, values) => {\n        let total = 0;\n        let totalWeights = 0;\n\n        if (values.active) {\n          // eslint-disable-next-line\n          for (const [_key, value] of Object.entries(values)) {\n            if (Number.isFinite(value)) {\n              let qi = value as number;\n\n              if (qi <= 0.5) {\n                total += qi * 1.3;\n                totalWeights += 1.3;\n              } else {\n                total += qi;\n                totalWeights += 1;\n              }\n            }\n          }\n\n          if (totalWeights) {\n            setSum(total / totalWeights);\n          }\n        }\n      }}\n      initialValues={{\n        active: true,\n        description: `${props.sourceInputPlaceholder} ${props.row + 1}`\n      }}\n    >\n      <Form.Item name=\"description\">\n        <Input style={{ marginTop: 6 }} />\n      </Form.Item>\n\n      <Form.Item name=\"active\" valuePropName=\"checked\">\n        <Checkbox\n          style={{ marginTop: 6 }}\n          checked={active}\n          onChange={(event) => {\n            setActive(event.target.checked);\n            if (props.onActiveChange) {\n              props.onActiveChange(event.target.checked);\n            }\n          }}\n        />\n      </Form.Item>\n\n      {props.columns.map((column, index) => {\n        return (\n          <Form.Item\n            key={index}\n            name={column.name}\n            rules={[{ required: false, message: \"Zahl zwischen 0 & 1 mit 2 Dezimalstellen\" }]}\n          >\n            <InputNumber\n              disabled={!active}\n              key={props.tableID + \"_\" + index}\n              size=\"small\"\n              min=\"0\"\n              max=\"1\"\n              step=\"0.01\"\n              precision={2}\n            />\n          </Form.Item>\n        );\n      })}\n      <div key={props.tableID + \"_\"} style={{ height: \"24px\", marginTop: 4, color: active ? \"#000\" : \"#ccc\" }}>\n        {sum.toFixed(2)}\n      </div>\n    </Form>\n  );\n}\n","import { Form, InputNumber } from \"antd\";\nimport React from \"react\";\nimport { ITableColumn } from \"./Table\";\n\nexport function TableRowTargetvalue(props: {\n  columns: ITableColumn[];\n  row: number;\n  rowTitle: string;\n  tableID: string;\n  reset: number;\n}) {\n  //reset does not work\n  const [form] = Form.useForm();\n\n  React.useEffect(() => {\n    if (form) {\n      form.resetFields();\n    }\n  }, [form, props.reset]);\n\n  return (\n    <Form\n      form={form}\n      style={{\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${2 + props.columns.length + 1}, 1fr)`,\n        justifyItems: \"center\",\n        columnGap: 16\n      }}\n      name=\"targetValues\"\n    >\n      <span\n        style={{\n          fontWeight: \"bold\",\n          textDecoration: \"underline\",\n          marginTop: 6,\n          overflow: \"hidden\",\n          textOverflow: \"ellipsis\",\n          width: \" 100%\"\n        }}\n      >\n        {props.rowTitle}\n      </span>\n      <div />\n      {props.columns.map((column, index) => {\n        return (\n          <Form.Item\n            key={index}\n            name={props.tableID + \"_targetValue_\" + column.name}\n            rules={[{ required: false, type: \"regexp\", message: \"TODO\" }]}\n          >\n            <InputNumber key={props.tableID + \"_\" + index} size=\"small\" min=\"0\" max=\"1\" step=\"0.01\" precision={2} />\n          </Form.Item>\n        );\n      })}\n    </Form>\n  );\n}\n","import React from \"react\";\n\nexport function TableRowAggregation(props: { values: string[]; tableID: string }) {\n  return (\n    <div\n      style={{\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${2 + props.values.length + 1}, 1fr)`,\n        justifyItems: \"center\",\n        columnGap: 16,\n        rowGap: 16\n      }}\n    >\n      <span\n        style={{\n          fontWeight: \"bold\",\n          textDecoration: \"underline\",\n          marginTop: 6,\n          overflow: \"hidden\",\n          textOverflow: \"ellipsis\",\n          width: \" 100%\"\n        }}\n      >\n        Aggregation\n      </span>\n      <div />\n      {props.values.map((value, index) => {\n        return (\n          <div style={{ height: \"24px\" }} key={props.tableID + \"_\" + index}>\n            {value}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","import { Button } from \"antd\";\nimport { DownloadOutlined, UploadOutlined } from \"@ant-design/icons\";\nimport React from \"react\";\n\nimport \"../App.css\";\n\nexport function CSV(props: any) {\n  return (\n    <>\n      <div style={{ justifyContent: \"flex-end\", display: \"flex\", marginTop: 16 }}>\n        <span style={{ textAlign: \"center\", marginRight: 20, marginTop: 10 }}>.csv</span>\n        <Button type=\"primary\" icon={<DownloadOutlined />} size={\"large\"} style={{ marginRight: 16 }} />\n        <Button type=\"primary\" icon={<UploadOutlined />} size={\"large\"} />\n      </div>\n    </>\n  );\n}\n","import { Button, Form, Divider, Card, Popconfirm, message } from \"antd\";\nimport React from \"react\";\nimport { TableRow } from \"./TableRow\";\nimport { TableRowTargetvalue } from \"./TableRowTargetvalue\";\nimport { TableRowAggregation } from \"./TableRowAggregation\";\nimport { CSV } from \"../CSV\";\nimport Chart from \"react-apexcharts\";\nimport { WarningOutlined, StarFilled } from \"@ant-design/icons\";\n\nexport interface ITableColumn {\n  name: string;\n  weight: number;\n}\n\nexport interface tableLegend {\n  shortcut: string;\n  name: string;\n}\n\nexport function Table(props: {\n  title: string;\n  sourceTitle: string;\n  sourceInputPlaceholder: string;\n  description: React.ReactNode;\n  backgroundColor: string;\n  columns: ITableColumn[];\n  resultTitle: string;\n  resultInitials: string;\n  rowsCount: number;\n  tableID: string;\n  tableLegend: tableLegend[];\n  maturityWeight: number;\n  onQualityLevelChange(value: number): void;\n}) {\n  const initialSums: number[] = [];\n  for (let i = 0; i < props.columns.length; i++) {\n    initialSums.push(0);\n  }\n\n  const initialSumsRows: number[] = [];\n  for (let i = 0; i < props.rowsCount; i++) {\n    initialSumsRows.push(0);\n  }\n\n  const initialRowDescriptions: string[] = [];\n  for (let i = 0; i < props.rowsCount; i++) {\n    initialRowDescriptions.push(`${props.sourceInputPlaceholder} ${i + 1}`);\n  }\n\n  const [sums, setSums] = React.useState<number[]>(initialSums);\n  const [rowSums, setRowSums] = React.useState<number[]>(initialSumsRows);\n  const [rowDescriptions, setRowDescription] = React.useState<string[]>(initialRowDescriptions);\n  const [reset, setReset] = React.useState<number>(0);\n  const [targetValues, setTargetValues] = React.useState<number[]>([]);\n\n  // Calculate Metrics: DQ, IQ, KQ\n  const calculateMetric = () => {\n    let totalMetric = 0;\n\n    sums.forEach((sum, index) => {\n      const weightedSum = props.columns[index].weight * sum;\n\n      totalMetric += weightedSum;\n    });\n\n    return totalMetric;\n  };\n\n  const colorIcon = () => {\n    let totalMetric = 0;\n    let iconColor = \"#FFFFFF\";\n\n    sums.forEach((sum, index) => {\n      const weightedSum = props.columns[index].weight * sum;\n\n      totalMetric += weightedSum;\n    });\n\n    if (totalMetric <= 0.5) {\n      return (iconColor = \"#FF0000\");\n    } else if (0.51 < totalMetric && totalMetric <= 0.66) {\n      return (iconColor = \"#ff8e03\");\n    } else if (0.67 < totalMetric && totalMetric <= 0.82) {\n      return (iconColor = \"#FFE000\");\n    } else if (0.83 < totalMetric && totalMetric <= 1.03) {\n      return (iconColor = \"#4EEE94\");\n    } else {\n      return iconColor;\n    }\n  };\n\n  // Metric Chart Categories\n  let categoriesMetricChart = props.columns.map((a) => a.name);\n\n  return (\n    <div style={{ textAlign: \"center\", background: props.backgroundColor, padding: 40, marginTop: 40 }}>\n      <h1 style={{ textTransform: \"uppercase\" }}>{props.title}</h1>\n      <p>{props.description}</p>\n      <CSV />\n      <div\n        style={{\n          marginTop: 40,\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${2 + props.columns.length + 1}, 1fr)`,\n          justifyItems: \"center\",\n          columnGap: 16,\n          rowGap: 4\n        }}\n      >\n        <span\n          style={{\n            fontWeight: \"bold\",\n            textDecoration: \"underline\",\n            overflow: \"hidden\",\n            textOverflow: \"ellipsis\",\n            width: \" 100%\"\n          }}\n        >\n          {props.sourceTitle}\n        </span>\n        <span\n          style={{\n            fontWeight: \"bold\",\n            textDecoration: \"underline\",\n            overflow: \"hidden\",\n            textOverflow: \"ellipsis\",\n            width: \" 100%\"\n          }}\n        >\n          An/Aus\n        </span>\n        {props.columns.map((column, index) => {\n          return (\n            <span\n              style={{ fontWeight: \"bold\", overflow: \"hidden\", textOverflow: \"ellipsis\", width: \" 100%\" }}\n              key={index}\n            >\n              {column.name}\n            </span>\n          );\n        })}\n\n        <span\n          style={{\n            fontWeight: \"bold\",\n            textDecoration: \"underline\",\n            overflow: \"hidden\",\n            textOverflow: \"ellipsis\",\n            width: \" 100%\"\n          }}\n        >\n          Aggregation\n        </span>\n      </div>\n\n      <Form.Provider\n        onFormChange={(name, info) => {\n          if (name === \"targetValues\") {\n            const targetValuesForm = info.forms.targetValues;\n            const targetValues: number[] = [];\n\n            props.columns.forEach((column, index) => {\n              const formTargetValue = targetValuesForm.getFieldValue(props.tableID + \"_targetValue_\" + column.name);\n              if (formTargetValue !== undefined) {\n                targetValues[index] = formTargetValue;\n              } else {\n                targetValues[index] = 0;\n              }\n            });\n\n            setTargetValues(targetValues);\n          } else {\n            const sums: number[] = [];\n\n            for (let i = 0; i < props.columns.length; i++) {\n              sums[i] = 0;\n            }\n\n            // Calculate Aggregation Columns\n            props.columns.forEach((column, index) => {\n              let totalColumn = 0;\n              let totalColumnWeights = 0;\n\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              for (const [_formName, form] of Object.entries(info.forms)) {\n                if (form.getFieldValue(\"active\")) {\n                  const formColumnValue = form.getFieldValue(column.name);\n\n                  if (formColumnValue !== undefined) {\n                    if (formColumnValue <= 0.5) {\n                      totalColumn += formColumnValue * 1.3;\n                      totalColumnWeights += 1.3;\n                    } else {\n                      totalColumn += formColumnValue;\n                      totalColumnWeights += 1;\n                    }\n                    sums[index] = totalColumn / totalColumnWeights;\n                  }\n                }\n              }\n            });\n            setSums(sums);\n\n            // Calculate Row Aggregation for Chart\n            const newRowSums = [];\n            const newRowDescriptions = [];\n\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            for (const [formName, form] of Object.entries(info.forms)) {\n              if (formName !== \"targetValues\") {\n                let rowColumn = 0;\n                let rowColumnWeights = 0;\n\n                if (form.getFieldValue(\"active\")) {\n                  props.columns.forEach((column, index) => {\n                    const formColumnValue = form.getFieldValue(column.name);\n\n                    if (Number.isFinite(formColumnValue)) {\n                      if (formColumnValue <= 0.5) {\n                        rowColumn += formColumnValue * 1.3;\n                        rowColumnWeights += 1.3;\n                      } else {\n                        rowColumn += formColumnValue;\n                        rowColumnWeights += 1;\n                      }\n                    }\n                  });\n\n                  newRowDescriptions.push(form.getFieldValue(\"description\"));\n\n                  if (rowColumnWeights) {\n                    newRowSums.push(rowColumn / rowColumnWeights);\n                  } else {\n                    newRowSums.push(0);\n                  }\n                }\n              }\n            }\n\n            setRowSums(newRowSums);\n            setRowDescription(newRowDescriptions);\n          }\n\n          props.onQualityLevelChange(calculateMetric() * props.maturityWeight);\n        }}\n      >\n        {Array.from({ length: props.rowsCount }, (x, i) => i).map((row) => {\n          return (\n            <TableRow\n              key={row}\n              columns={props.columns}\n              row={row}\n              sourceInputPlaceholder={props.sourceInputPlaceholder}\n              tableID={props.tableID}\n              reset={reset}\n            />\n          );\n        })}\n\n        <Divider />\n\n        <TableRowAggregation values={sums.map((i) => i.toFixed(2))} tableID={props.tableID} />\n        <TableRowTargetvalue\n          columns={props.columns}\n          row={props.rowsCount + 1}\n          rowTitle={\"Sollwert\"}\n          tableID={props.tableID}\n          reset={reset}\n        />\n\n        <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n          <Popconfirm\n            icon={<WarningOutlined style={{ color: \"red\" }} />}\n            title=\"Wollen Sie die Werte dieses Abschnitts wirklich zurücksetzen?\"\n            okText=\"OK\"\n            cancelText=\"Abbrechen\"\n            onConfirm={() => {\n              for (let i = 0; i < props.columns.length; i++) {\n                sums[i] = 0;\n              }\n              setRowSums(initialSumsRows);\n              setTargetValues([]);\n              setRowDescription(initialRowDescriptions);\n              setReset(reset + 1);\n              message.success(\"Daten wurden erfolgreich zurückgesetzt!\");\n            }}\n          >\n            <Button type=\"text\" danger style={{ marginRight: 16, marginTop: 24 }}>\n              Zurücksetzen\n            </Button>\n          </Popconfirm>\n        </div>\n\n        <div style={{ textAlign: \"center\", marginTop: 4 }}>\n          {props.tableLegend.map((term, index) => {\n            return (\n              <span style={{ fontSize: 10, overflow: \"hidden\", textOverflow: \"ellipsis\", width: \" 100%\" }} key={index}>\n                {term.shortcut + \"...\" + term.name + \", \"}\n              </span>\n            );\n          })}\n        </div>\n\n        <Divider />\n\n        <div style={{ display: \"flex\", justifyContent: \"space-between\", marginTop: 40 }}>\n          <Chart\n            // Metric Chart\n            options={{\n              chart: {\n                id: \"metric-chart\"\n              },\n              xaxis: {\n                categories: categoriesMetricChart,\n                labels: {\n                  show: true,\n                  style: {\n                    colors: [\"#000\", \"#000\", \"#000\", \"#000\", \"#000\", \"#000\", \"#000\", \"#000\", \"#000\", \"#000\"],\n                    fontSize: \"12px\"\n                  }\n                }\n              },\n              yaxis: {\n                forceNiceScale: true,\n                min: 0,\n                max: 1,\n                labels: {\n                  maxWidth: 1,\n                  style: {\n                    colors: [\"#000\"]\n                  },\n                  formatter: function (val, index) {\n                    return val.toFixed(2);\n                  }\n                }\n              },\n              legend: {\n                markers: {\n                  fillColors: [\"#ff8e03\", \"#0a9bf0\"]\n                }\n              },\n              stroke: {\n                show: true,\n                colors: [\"#ff8e03\", \"#0a9bf0\"]\n              },\n              fill: {\n                colors: [\"#ff8e03\", \"#0a9bf0\"],\n                opacity: 0.1\n              },\n              markers: {\n                size: 4,\n                colors: [\"#ff8e03\", \"#0a9bf0\"],\n                hover: {\n                  size: 6\n                }\n              },\n              plotOptions: {\n                radar: {\n                  size: 140,\n                  polygons: {\n                    strokeColors: \"#9D9F9E\",\n                    connectorColors: \"#9D9F9E\"\n                  }\n                }\n              },\n              title: {\n                text: `${props.resultInitials} Indikatoren Diagramm`\n              }\n            }}\n            series={[\n              {\n                name: `${props.resultInitials} Indikatoren`,\n                data: sums\n              },\n              { name: `${props.resultInitials} Sollwerte`, data: targetValues }\n            ]}\n            type=\"radar\"\n            width=\"700\"\n            key={reset + \"a\"}\n          />\n\n          <Card style={{ width: 300, margin: \"auto\" }} title={props.resultTitle}>\n            <span style={{ margin: 0 }}>\n              {props.resultInitials} = {calculateMetric().toFixed(2)}\n            </span>\n            <span style={{ marginLeft: 8 }}>\n              <StarFilled style={{ color: colorIcon() }} />\n            </span>\n          </Card>\n\n          <Chart\n            // Source Chart\n            options={{\n              chart: {\n                id: \"source-chart\"\n              },\n              xaxis: {\n                categories: rowDescriptions,\n                labels: {\n                  show: true,\n                  style: {\n                    colors: [\n                      \"#000\",\n                      \"#000\",\n                      \"#000\",\n                      \"#000\",\n                      \"#000\",\n                      \"#000\",\n                      \"#000\",\n                      \"#000\",\n                      \"#000\",\n                      \"#000\",\n                      \"#000\",\n                      \"#000\",\n                      \"#000\",\n                      \"#000\",\n                      \"#000\"\n                    ],\n                    fontSize: \"12px\"\n                  }\n                }\n              },\n              yaxis: {\n                forceNiceScale: true,\n                min: 0,\n                max: 1,\n                labels: {\n                  maxWidth: 1,\n                  style: {\n                    colors: [\"#000\"]\n                  },\n                  formatter: function (val, index) {\n                    return val.toFixed(2);\n                  }\n                }\n              },\n              legend: {\n                showForSingleSeries: true,\n                markers: {\n                  fillColors: [\"#4EEE94\"]\n                }\n              },\n              stroke: {\n                show: true,\n                colors: [\"#4EEE94\"]\n              },\n              fill: {\n                colors: [\"#4EEE94\"],\n                opacity: 0.1\n              },\n              markers: {\n                size: 4,\n                colors: [\"#4EEE94\"],\n                hover: {\n                  size: 6\n                }\n              },\n              plotOptions: {\n                radar: {\n                  size: 140,\n                  polygons: {\n                    strokeColors: \"#9D9F9E\",\n                    connectorColors: \"#9D9F9E\"\n                  }\n                }\n              },\n              title: {\n                text: `${props.sourceTitle} Diagramm`\n              }\n            }}\n            series={[\n              {\n                name: `${props.resultInitials} Quellen`,\n                data: rowSums\n              }\n            ]}\n            type=\"radar\"\n            width=\"700\"\n            key={reset + \"b\"}\n          />\n        </div>\n      </Form.Provider>\n    </div>\n  );\n}\n","import { Form, Checkbox, Input, InputNumber } from \"antd\";\nimport React from \"react\";\n\nexport function calculateFulfilment(actualValue: number, targetValue: number): number {\n  if (targetValue === 0) {\n    return 0;\n  } else if (actualValue <= targetValue) {\n    return (actualValue / targetValue) * 100;\n  } else if (targetValue < actualValue) {\n    return (targetValue / actualValue) * 100;\n  } else {\n    console.error(\"Something went wrong!\");\n    return 0;\n  }\n}\n\nexport function TableMQRow(props: {\n  row: number;\n  isKpiRow: boolean;\n  step: string;\n  defaultValueName?: string;\n  defaultValueTarget?: number;\n  tableID: string;\n  perspective: string;\n  reset: number;\n  onActiveChange?(active: boolean): void;\n}) {\n  const [form] = Form.useForm();\n  const [active, setActive] = React.useState<boolean>(true);\n  const [fulfilment, setFulfilment] = React.useState<number>(0);\n\n  React.useEffect(() => {\n    if (form) {\n      form.resetFields();\n    }\n    setFulfilment(0);\n    setActive(true);\n  }, [form, props.reset]);\n\n  // let categoriesPerspectiveChart = [];\n\n  return (\n    <Form\n      form={form}\n      name={props.tableID + \"_\" + props.perspective + \"_\" + props.row}\n      style={{ gridRow: `${props.row}`, gridColumn: 2 }}\n      onValuesChange={(_, values) => {\n        let actualValue: number = form.getFieldValue(\"actualValue\") || 0;\n        let targetValue: number = form.getFieldValue(\"targetValue\") || 0;\n\n        // console.log(\"rowValues\", actualValue, targetValue);\n\n        setFulfilment(calculateFulfilment(actualValue, targetValue));\n      }}\n      initialValues={{\n        active: true,\n        step: props.step,\n        description: props.defaultValueName,\n        actualValue: \"\",\n        targetValue: props.defaultValueTarget || \"\"\n      }}\n    >\n      <div\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: \"repeat(6,  1fr)\",\n          justifyContent: \"center\",\n          columnGap: 16\n        }}\n      >\n        <Form.Item name=\"active\" valuePropName=\"checked\">\n          <Checkbox\n            style={{ marginTop: 4 }}\n            checked={active}\n            onChange={(event) => {\n              setActive(event.target.checked);\n              if (props.onActiveChange) {\n                props.onActiveChange(event.target.checked);\n              }\n            }}\n          />\n        </Form.Item>\n\n        <Form.Item name=\"step\">\n          <div>\n            <Input disabled style={{ display: \"none\" }} />\n            <div>{props.step}</div>\n          </div>\n        </Form.Item>\n\n        <Form.Item name=\"description\">\n          <Input disabled={active ? props.isKpiRow : !active} />\n        </Form.Item>\n        <Form.Item name=\"actualValue\">\n          <InputNumber\n            disabled={!active}\n            key={props.tableID + \"_\" + props.perspective + \"_\" + props.row + \"_actualValue\"}\n            size=\"small\"\n            min=\"0\"\n            max=\"100\"\n            step=\"1\"\n          />\n        </Form.Item>\n        <Form.Item name=\"targetValue\">\n          <InputNumber\n            disabled={active ? props.isKpiRow : !active}\n            key={props.tableID + \"_\" + props.perspective + \"_\" + props.row + \"_targetValue\"}\n          />\n        </Form.Item>\n        <Form.Item name=\"fulfilment\">\n          <div key={props.tableID + \"_fulfilment_\" + props.row} style={{ color: active ? \"#000\" : \"#ccc\" }}>\n            {fulfilment.toFixed(0)} %\n          </div>\n        </Form.Item>\n      </div>\n    </Form>\n  );\n}\n","import { Divider, Form, Button, Popconfirm, message } from \"antd\";\nimport React from \"react\";\nimport Chart from \"react-apexcharts\";\nimport { calculateFulfilment, TableMQRow } from \"./TableMQRow\";\nimport { WarningOutlined } from \"@ant-design/icons\";\n\nexport interface tableLegend {\n  shortcut: string;\n  name: string;\n}\n\nexport function TableMQPerspective(props: {\n  perspective: string;\n  tableID: string;\n  kpiRowCount: number;\n  defaultValueName: string[];\n  defaultValueTarget: number[];\n  piRowCount: number;\n  defaultValuePIName: string;\n  tableLegend: tableLegend[];\n  columns: string[];\n  onAggregationChange(value: number): void;\n  onReset(value: number): void;\n}) {\n  const initialMqRowDescriptions: string[] = [];\n  for (let i = 0; i < props.kpiRowCount + props.piRowCount; i++) {\n    initialMqRowDescriptions.push(props.defaultValueName[i]);\n  }\n\n  const initialFulfilment: number[] = [];\n  for (let i = 0; i < props.kpiRowCount + props.piRowCount; i++) {\n    initialFulfilment.push(0);\n  }\n\n  const [aggregationSum, setAggregationSum] = React.useState<number>(0);\n  const [mqRowDescriptions, setMqRowDescriptions] = React.useState<string[]>(initialMqRowDescriptions);\n  const [fulfilment, setFulfilment] = React.useState<number[]>(initialFulfilment);\n  const [reset, setReset] = React.useState<number>(0);\n\n  return (\n    <>\n      <Form.Provider\n        onFormChange={(name, info) => {\n          let totalKpi = 0;\n          let totalWeightsKpi = 0;\n          let sumKpi = 0;\n\n          let totalPi = 0;\n          let totalWeightsPi = 0;\n          let sumPi = 0;\n\n          const newMqRowDescriptions = [];\n          const newFulfilment: number[] = [];\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          for (const [_formName, form] of Object.entries(info.forms)) {\n            if (form.getFieldValue(\"active\")) {\n              const actualValue = form.getFieldValue(\"actualValue\") || 0;\n              const targetValue = form.getFieldValue(\"targetValue\");\n              if (Number.isFinite(form.getFieldValue(\"actualValue\"))) {\n                let qi = 1;\n                if (!Number.isFinite(targetValue) || targetValue === 0) {\n                  qi = 1;\n                } else if (actualValue > targetValue) {\n                  qi = targetValue / actualValue;\n                } else if (actualValue <= targetValue) {\n                  qi = actualValue / targetValue;\n                } else {\n                  console.error(\"Something went wrong in aggregation calculation!\");\n                }\n                if (form.getFieldValue(\"step\") === \"KPI\") {\n                  if (qi <= 0.5) {\n                    totalKpi += qi * 1.3;\n                    totalWeightsKpi += 1.3;\n                  } else {\n                    totalKpi += qi;\n                    totalWeightsKpi += 1;\n                  }\n\n                  if (totalWeightsKpi) {\n                    sumKpi = totalKpi / totalWeightsKpi;\n                  }\n                } else if (form.getFieldValue(\"step\") === \"PI\") {\n                  if (qi <= 0.5) {\n                    totalPi += qi * 1.3;\n                    totalWeightsPi += 1.3;\n                  } else {\n                    totalPi += qi;\n                    totalWeightsPi += 1;\n                  }\n\n                  if (totalWeightsPi) {\n                    sumPi = totalPi / totalWeightsPi;\n                  }\n                }\n              }\n              newFulfilment.push(calculateFulfilment(actualValue || 0, targetValue || 0));\n\n              setFulfilment(newFulfilment);\n\n              newMqRowDescriptions.push(form.getFieldValue(\"description\"));\n            }\n          }\n\n          setAggregationSum(sumKpi * 0.66 + sumPi * 0.33);\n          setMqRowDescriptions(newMqRowDescriptions);\n\n          props.onAggregationChange(aggregationSum);\n        }}\n      >\n        <div>\n          <div\n            style={{\n              marginBottom: 4,\n              fontWeight: \"bold\",\n              textDecoration: \"underline\"\n            }}\n          >\n            {props.perspective}\n          </div>\n\n          \n\n          <div\n            style={{\n              display: \"grid\",\n              gridTemplateColumns: \"70% auto\"\n            }}\n          >\n            <div\n\n            ><div\n            style={{\n              display: \"grid\",\n              gridTemplateColumns: `repeat(${props.columns.length}, 1fr)`,\n              justifyItems: \"center\",\n              columnGap: 16,\n              marginTop: 40,\n              marginBottom: 24\n    \n            }}\n          >\n            {props.columns.map((column, index) => {\n              return (\n                <span\n                  style={{  fontWeight: \"bold\", marginLeft: 5, marginRight: 5 }}\n                  key={index}\n                >\n                  {column}\n                </span>\n              );\n            })}\n          </div>\n              {Array.from({ length: props.kpiRowCount }, (x, i) => i).map((row, i) => {\n                return (\n                  <TableMQRow\n                    key={row}\n                    row={row}\n                    isKpiRow={true}\n                    step=\"KPI\"\n                    defaultValueName={props.defaultValueName[i]}\n                    defaultValueTarget={props.defaultValueTarget[i]}\n                    tableID={props.tableID}\n                    perspective={props.perspective}\n                    reset={reset}\n                  />\n                );\n              })}\n\n              {Array.from({ length: props.piRowCount }, (x, i) => props.kpiRowCount + i).map((row) => {\n                return (\n                  <TableMQRow\n                    key={row}\n                    row={row}\n                    isKpiRow={false}\n                    step=\"PI\"\n                    defaultValueName={props.defaultValueName[row]}\n                    tableID={props.tableID}\n                    perspective={props.perspective}\n                    reset={reset}\n                  />\n                );\n              })}\n              <div style={{ marginTop: 20 }}>Aggregation: {aggregationSum.toFixed(2)} </div>\n              <div style={{ textAlign: \"center\", marginTop: 4 }}>\n                {props.tableLegend.map((term, index) => {\n                  return (\n                    <span\n                      style={{ fontSize: 10, overflow: \"hidden\", textOverflow: \"ellipsis\", width: \" 100%\" }}\n                      key={index}\n                    >\n                      {term.shortcut + \"...\" + term.name + \", \"}\n                    </span>\n                  );\n                })}\n              </div>\n              <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n                <Popconfirm\n                  icon={<WarningOutlined style={{ color: \"red\" }} />}\n                  title=\"Wollen Sie die Werte dieser Perspektive wirklich zurücksetzen?\"\n                  okText=\"OK\"\n                  cancelText=\"Abbrechen\"\n                  onConfirm={() => {\n                    setAggregationSum(0);\n                    setMqRowDescriptions(initialMqRowDescriptions);\n                    setFulfilment(initialFulfilment);\n                    setReset(reset + 1);\n                    props.onReset(reset + 1)\n                    message.success(\"Daten wurden erfolgreich zurückgesetzt!\");\n                  }}\n                >\n                  <Button type=\"text\" danger style={{ marginRight: 16, marginTop: 24 }}>\n                    Zurücksetzen\n                  </Button>\n                </Popconfirm>\n              </div>\n            </div>\n   \n            <Chart\n              // Perspective Chart\n              options={{\n                chart: {\n                  id: \"perspective-chart\"\n                },\n                xaxis: {\n                  categories: mqRowDescriptions,\n                  labels: {\n                    show: true,\n                    style: {\n                      colors: [\"#000\", \"#000\", \"#000\", \"#000\", \"#000\", \"#000\"],\n                      fontSize: \"12px\"\n                    }\n                  }\n                },\n                yaxis: {\n                  forceNiceScale: true,\n                  min: 0,\n                  max: 95,\n                  labels: {\n                    maxWidth: 1,\n                    style: {\n                      colors: [\"#000\"]\n                    },\n                    formatter: function (val, index) {\n                      return val.toFixed(2);\n                    }\n                  }\n                },\n                legend: {\n                  showForSingleSeries: true,\n                  markers: {\n                    fillColors: [\"#FFE000\"]\n                  }\n                },\n                stroke: {\n                  show: true,\n                  colors: [\"#FFE000\"]\n                },\n                fill: {\n                  colors: [\"#FFE000\"],\n                  opacity: 0.1\n                },\n                markers: {\n                  size: 4,\n                  colors: [\"#FFE000\"],\n                  hover: {\n                    size: 6\n                  }\n                },\n                plotOptions: {\n                  radar: {\n                    size: 140,\n                    polygons: {\n                      strokeColors: \"#9D9F9E\",\n                      connectorColors: \"#9D9F9E\"\n                    }\n                  }\n                },\n                title: {\n                  text: `${props.perspective} Diagramm`,\n                  align: \"center\",\n\n                  style: {\n                    fontSize: \"14px\"\n                  }\n                }\n              }}\n              series={[\n                {\n                  name: `Erfüllungsgrad, [%]`,\n                  data: fulfilment\n                }\n              ]}\n              type=\"radar\"\n              width=\"700\"\n              height=\"400\"\n              key={reset + \"b\"}\n            />\n          </div>\n        </div>\n\n        <Divider />\n      </Form.Provider>\n    </>\n  );\n}\n","import { Form, Card } from \"antd\";\nimport React from \"react\";\nimport { CSV } from \"../CSV\";\nimport { TableMQPerspective } from \"./TableMQPerspective\";\nimport { StarFilled } from \"@ant-design/icons\";\n\nexport function TableMQ(props: {\n  title: string;\n  description: React.ReactNode;\n  backgroundColor: string;\n  columns: string[];\n  resultTitle: string;\n  resultInitials: string;\n  maturityWeight: number;\n  tableID: string;\n  onQualityLevelChange(value: number): void;\n}) {\n  const [aggregationPerspective1, setAggregationPerspective1] = React.useState<number>(0);\n  const [aggregationPerspective2, setAggregationPerspective2] = React.useState<number>(0);\n  const [aggregationPerspective3, setAggregationPerspective3] = React.useState<number>(0);\n  const [aggregationPerspective4, setAggregationPerspective4] = React.useState<number>(0);\n  const [mqMetric, setMqMetric] = React.useState<number>(0);\n\n  const colorIcon = () => {\n    let mqMetric = 0;\n    let iconColor = \"#FFFFFF\";\n\n    mqMetric =\n      (aggregationPerspective1 + aggregationPerspective2 + aggregationPerspective3 + aggregationPerspective4) / 4;\n    if (mqMetric <= 0.5) {\n      return (iconColor = \"#FF0000\");\n    } else if (0.51 < mqMetric && mqMetric <= 0.66) {\n      return (iconColor = \"#ff8e03\");\n    } else if (0.67 < mqMetric && mqMetric <= 0.82) {\n      return (iconColor = \"#FFE000\");\n    } else if (0.83 < mqMetric && mqMetric <= 1.03) {\n      return (iconColor = \"#4EEE94\");\n    } else {\n      return iconColor;\n    }\n  };\n\n  return (\n    <div\n      style={{\n        textAlign: \"center\",\n        backgroundColor: props.backgroundColor,\n        padding: 40,\n        marginTop: 40\n      }}\n    >\n      <h1 style={{ textTransform: \"uppercase\" }}>{props.title}</h1>\n      <p>{props.description}</p>\n      <CSV />\n\n      <Form.Provider\n        onFormChange={(name, info) => {\n          let mqMetric =\n            (aggregationPerspective1 + aggregationPerspective2 + aggregationPerspective3 + aggregationPerspective4) / 4;\n          setMqMetric(mqMetric);\n\n\n\n          props.onQualityLevelChange(mqMetric * props.maturityWeight);\n\n        }}\n      >\n        <div style={{ marginTop: 24 }}>\n          <TableMQPerspective\n            perspective={\"Maschinenperspektive\"}\n            tableID={props.tableID}\n            columns={props.columns}\n            kpiRowCount={2}\n            defaultValueName={[\"Rss,ugep\", \"OEE\", \"PI Name 1\", \"PI Name 2\", \"PI Name 3\"]}\n            defaultValueTarget={[20, 85]}\n            piRowCount={3}\n            defaultValuePIName={\"PI Name\"}\n            tableLegend={[\n              { shortcut: \"Rss,ugep\", name: \"Ratio ungeplante Stillstandzeit\" },\n              { shortcut: \"OEE\", name: \"Overall Equipment Effectiveness\" }\n            ]}\n            onAggregationChange={(value) => {\n              setAggregationPerspective1(value);\n            }}\n            onReset={(value) => {\n              setMqMetric(0)\n            }}\n          />\n\n          <TableMQPerspective\n            perspective={\"Prozessperspektive\"}\n            tableID={props.tableID}\n            columns={props.columns}\n            kpiRowCount={3}\n            defaultValueName={[\"Riha,ugep\", \"EGiha,ugep\", \"EGiha,gep\", \"PI Name 1\", \"PI Name 2\", \"PI Name 3\"]}\n            defaultValueTarget={[10, 75, 90]}\n            piRowCount={3}\n            defaultValuePIName={\"PI Name\"}\n            tableLegend={[\n              { shortcut: \"Riha,ugep\", name: \"Ratio Instandhaltungsaufträge ungeplant\" },\n              { shortcut: \"EGiha,ugep\", name: \"Erfüllungsgrad ungeplanter Instandhaltungsaufträge\" },\n              { shortcut: \"EGiha,gep\", name: \"Erfüllungsgrad geplanter Instandhaltungsaufträge\" }\n            ]}\n            onAggregationChange={(value) => {\n              setAggregationPerspective2(value);\n            }}\n            onReset={(value) => {\n              setMqMetric(0)\n            }}\n          />\n          <TableMQPerspective\n            perspective={\"Kostenperspektive\"}\n            tableID={props.tableID}\n            columns={props.columns}\n            kpiRowCount={2}\n            defaultValueName={[\"Rihk,ugep\", \"Rihk,personal\", \"PI Name 1\", \"PI Name 2\", \"PI Name 3\"]}\n            defaultValueTarget={[15, 10]}\n            piRowCount={3}\n            defaultValuePIName={\"PI Name\"}\n            tableLegend={[\n              { shortcut: \"Rihk,ugep\", name: \"Ratio Instandhaltungskosten ungeplant\" },\n              { shortcut: \"Rihk,personal\", name: \"Instandhaltungspersonalksoten-Ratio\" }\n            ]}\n            onAggregationChange={(value) => {\n              setAggregationPerspective3(value);\n            }}\n            onReset={(value) => {\n              setMqMetric(0)\n            }}\n          />\n          <TableMQPerspective\n            perspective={\"Ressourcenperspektive\"}\n            tableID={props.tableID}\n            columns={props.columns}\n            kpiRowCount={1}\n            defaultValueName={[\"PS,ugep\", \"PI Name 1\", \"PI Name 2\", \"PI Name 3\"]}\n            defaultValueTarget={[15]}\n            piRowCount={3}\n            defaultValuePIName={\"PI Name\"}\n            tableLegend={[{ shortcut: \"PS,ugep\", name: \"geleistete Personenstunden der ungeplanten Instandhaltung\" }]}\n            onAggregationChange={(value) => {\n              setAggregationPerspective4(value);\n            }}\n            onReset={(value) => {\n              setMqMetric(0)\n            }}\n          />\n        </div>\n      </Form.Provider>\n\n      <Card style={{ width: 300, margin: \"auto\" }} title={props.resultTitle}>\n        <span style={{ margin: 0 }}>\n          {props.resultInitials} = {mqMetric.toFixed(2)}\n        </span>\n        <span style={{ marginLeft: 8 }}>\n          <StarFilled style={{ color: colorIcon() }} />\n        </span>\n      </Card>\n    </div>\n  );\n}\n","import React from \"react\";\n\nconst Footer = () => {\n  return (\n    <>\n      <footer style={{ padding: 16, fontSize: \"0.5rem\" }}>\n        <div>{/* put some more Info about the Tool here? */}</div>\n      </footer>\n    </>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\n\nimport Introbox from \"./components/Introbox\";\nimport Result from \"./components/Result\";\n\nimport \"./App.css\";\nimport { Table } from \"./components/table/Table\";\nimport { TableMQ } from \"./components/table/TableMQ\";\nimport Footer from \"./components/Footer\";\n\nfunction App() {\n  const [weightedMetricDQ, setWeightedMetricDQ] = React.useState<number>(0);\n  const [weightedMetricIQ, setWeightedMetricIQ] = React.useState<number>(0);\n  const [weightedMetricKQ, setWeightedMetricKQ] = React.useState<number>(0);\n  const [weightedMetricMQ, setWeightedMetricMQ] = React.useState<number>(0);\n\n  return (\n    <>\n      <Introbox />\n      <Table\n        title=\"Datenqualitätsindikatoren\"\n        sourceTitle=\"Datenquellen\"\n        sourceInputPlaceholder=\"Datenquelle\"\n        description={\n          <>\n            Bitte geben Sie die Datenqualitätsindikatoren gemäß Ihrer Auswertung ein.\n            <br /> Es werden Zahlen mit zwei Nachkommastellen zwischen Null und Eins akzeptiert. <br /> Quellen können\n            selbst benannt werden.\n          </>\n        }\n        backgroundColor=\"#e6f5ff\"\n        columns={[\n          { name: \"Korrektheit\", weight: 0.18 },\n          { name: \"Validität\", weight: 0.09 },\n          { name: \"Provenienz\", weight: 0.08 },\n          { name: \"Vollständigkeit\", weight: 0.13 },\n          { name: \"Verfügbarkeit\", weight: 0.14 },\n          { name: \"Granularität\", weight: 0.09 },\n          { name: \"Einzigartigkeit\", weight: 0.02 },\n          { name: \"System-Konsistenz\", weight: 0.16 },\n          { name: \"Zugänglichkeit\", weight: 0.06 },\n          { name: \"Pünktlichkeit\", weight: 0.07 }\n        ]}\n        resultTitle=\"Ergebnis Datenqualität:\"\n        resultInitials=\"DQ\"\n        rowsCount={15}\n        tableID=\"dq\"\n        tableLegend={[]}\n        maturityWeight={0.36}\n        onQualityLevelChange={(value) => {\n          setWeightedMetricDQ(value);\n        }}\n      />\n\n      <Table\n        title=\"Informationsqualitätsindikatoren\"\n        sourceTitle=\"Informationsquellen\"\n        sourceInputPlaceholder=\"Infoquelle\"\n        description={\n          <>\n            Bitte geben Sie die Informationsqualitätsindikatoren gemäß Ihrer Auswertung ein.\n            <br /> Es werden Zahlen mit zwei Nachkommastellen zwischen Null und Eins akzeptiert. <br /> Quellen können\n            selbst benannt werden.\n          </>\n        }\n        backgroundColor=\"#dbf1ff\"\n        columns={[\n          { name: \"Korrektheit\", weight: 0.2 },\n          { name: \"Validität\", weight: 0.14 },\n          { name: \"Erklärbarkeit\", weight: 0.09 },\n          { name: \"Aktualität\", weight: 0.14 },\n          { name: \"Prägnanz\", weight: 0.02 },\n          { name: \"Vollständigkeit\", weight: 0.15 },\n          { name: \"Pünktlichkeit\", weight: 0.12 },\n          { name: \"Zweckmäßigkeit\", weight: 0.07 },\n          { name: \"Informationsfluss\", weight: 0.06 }\n        ]}\n        resultTitle=\"Ergebnis Informationsqualität:\"\n        resultInitials=\"IQ\"\n        rowsCount={15}\n        tableID=\"iq\"\n        tableLegend={[]}\n        maturityWeight={0.23}\n        onQualityLevelChange={(value) => {\n          setWeightedMetricIQ(value);\n        }}\n      />\n\n      <Table\n        title=\"Wissensqualitätsindikatoren\"\n        sourceTitle=\"Wissensquellen\"\n        sourceInputPlaceholder=\"Wissensquelle\"\n        description={\n          <>\n            Bitte geben Sie die Wissensqualitätsindikatoren gemäß Ihrer Auswertung ein.\n            <br /> Es werden Zahlen mit zwei Nachkommastellen zwischen Null und Eins akzeptiert. <br /> Quellen können\n            selbst benannt werden.\n          </>\n        }\n        backgroundColor=\"#e6f5ff\"\n        columns={[\n          { name: \"BnKQ,k\", weight: 0.18 },\n          { name: \"EnKQ,k\", weight: 0.31 },\n          { name: \"LeKQ,k\", weight: 0.31 },\n          { name: \"ZwKQ\", weight: 0.21 }\n        ]}\n        resultTitle=\"Ergebnis Wissensqualität:\"\n        resultInitials=\"KQ\"\n        rowsCount={15}\n        tableID=\"kq\"\n        tableLegend={[\n          { shortcut: \"BnKQ,k\", name: \"Bildungsniveau eines Mitarbeiters\" },\n          { shortcut: \"EnKQ,k\", name: \"Erfahrungsniveau eines Mitarbeiters\" },\n          { shortcut: \"LeKQ,k\", name: \"Leistungsniveau eines Mitarbeiters\" },\n          { shortcut: \"ZwKQ\", name: \"Zweckmäßigkeit eines IT-Systems zur Wissensbereitstellung\" }\n        ]}\n        maturityWeight={0.28}\n        onQualityLevelChange={(value) => {\n          setWeightedMetricKQ(value);\n        }}\n      />\n\n      <TableMQ\n        title=\"Instandhaltungsqualitätsindikatoren\"\n        description={\n          <>\n            Bitte geben Sie die Instandhaltungsqualitätsindikatoren gemäß Ihrer Auswertung ein.\n            <br /> Für Prozentangaben werden ganze Zahlen zwischen Null und 100 akzeptiert.\n            <br /> PI Kennzahlen können selbst benannt werden.\n          </>\n        }\n        backgroundColor=\"#dbf1ff\"\n        columns={[\"An/Aus\", \"Stufe\", \"Kennzahl\", \"Ist, [%]\", \"Soll, [%]\", \"Erfüllungsgrad\"]}\n        resultTitle=\"Ergebnis Instandhaltungsqualität:\"\n        resultInitials=\"MQ\"\n        maturityWeight={0.13}\n        tableID=\"mq\"\n        onQualityLevelChange={(value) => {\n          setWeightedMetricMQ(value);\n        }}\n      />\n\n      <Result maturityLevel={weightedMetricDQ + weightedMetricIQ + weightedMetricKQ + weightedMetricMQ} />\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"antd/dist/antd.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}