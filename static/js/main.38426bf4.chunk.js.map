{"version":3,"sources":["components/img/TU-Wien-Logo.png","components/Introbox.tsx","components/Result.tsx","components/table/TableRow.tsx","components/table/TableRowTargetvalue.tsx","components/table/TableRowAggregation.tsx","components/table/Table.tsx","components/table/TableMQRow.tsx","components/table/TableMQPerspective.tsx","components/table/TableMQ.tsx","components/Footer.tsx","App.tsx","index.tsx"],"names":["Introbox","style","textAlign","className","float","width","height","marginTop","src","Logo","alt","fontSize","textTransform","marginBottom","Result","props","Fragment","backgroundColor","padding","textDecoration","title","margin","maturityLevel","toFixed","fontStyle","fontWeight","maturityStage","calculateMaturityStage","marginLeft","StarFilled","color","iconColor","colorIcon","overflow","textOverflow","TableRow","Form","useForm","form","React","useState","active","setActive","sum","setSum","handleFieldValuesChange","values","total","totalWeights","Object","entries","value","Number","isFinite","useEffect","resetFields","reset","initialValues","defaultValues","columns","forEach","column","index","name","description","setFieldsValue","getFieldsValue","submit","tableID","row","toString","display","gridTemplateColumns","length","justifyItems","columnGap","rowGap","onValuesChange","_","sourceInputPlaceholder","Item","valuePropName","checked","onChange","event","target","onActiveChange","map","rules","required","message","disabled","size","min","max","step","precision","TableRowTargetvalue","rowTitle","type","TableRowAggregation","Table","initialSums","i","push","initialSumsRows","rowsCount","initialRowDescriptions","sums","setSums","rowSums","setRowSums","rowDescriptions","setRowDescription","setReset","targetValues","setTargetValues","isModalVisible","setIsModalVisible","csvFile","setCsvFile","csvFileRowsCount","setCsvFileRowsCount","setInitialValues","currentForms","setCurrentForms","calculateMetric","totalMetric","weightedSum","weight","Dragger","Upload","categoriesMetricChart","a","forms","Array","from","x","background","justifyContent","marginRight","onClick","icon","UploadOutlined","visible","onOk","originFileObj","Papa","parse","complete","results","csvDataForTable","data","e","console","log","newItem","j","undefined","parseFloat","onCancel","destroyOnClose","accept","beforeUpload","multiple","maxCount","info","fileList","file","InboxOutlined","formName","csvRowArray","formValues","headings","unshift","sourceTitle","blob","Blob","unparse","fields","document","createElement","href","URL","createObjectURL","download","body","appendChild","click","removeChild","DownloadOutlined","Provider","onFormChange","targetValuesForm","formTargetValue","getFieldValue","totalColumn","totalColumnWeights","formColumnValue","newRowSums","newRowDescriptions","rowColumn","rowColumnWeights","onQualityLevelChange","maturityWeight","WarningOutlined","okText","cancelText","onConfirm","success","danger","tableLegend","term","shortcut","flexWrap","options","chart","id","resultInitials","xaxis","categories","labels","show","colors","yaxis","forceNiceScale","maxWidth","formatter","val","legend","markers","fillColors","stroke","fill","opacity","hover","plotOptions","radar","polygons","strokeColors","connectorColors","text","series","resultTitle","showForSingleSeries","calculateFulfilment","actualValue","targetValue","error","TableMQRow","fulfilment","setFulfilment","perspective","gridRow","gridColumn","defaultValueName","defaultValueTarget","isKpiRow","TableMQPerspective","initialMqRowDescriptions","kpiRowCount","piRowCount","initialFulfilment","aggregationSum","setAggregationSum","mqRowDescriptions","setMqRowDescriptions","forms_KPI","forms_PI","totalKpi","totalWeightsKpi","sumKpi","totalPi","totalWeightsPi","sumPi","newMqRowDescriptions","newFulfilment","qi","newSum","onAggregationChange","gridAutoFlow","align","TableMQ","aggregationPerspective1","setAggregationPerspective1","aggregationPerspective2","setAggregationPerspective2","aggregationPerspective3","setAggregationPerspective3","aggregationPerspective4","setAggregationPerspective4","mqMetric","setMqMetric","calculateMqMetric","defaultValuePIName","Footer","App","weightedMetricDQ","setWeightedMetricDQ","weightedMetricIQ","setWeightedMetricIQ","weightedMetricKQ","setWeightedMetricKQ","weightedMetricMQ","setWeightedMetricMQ","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.38426bf4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/TU-Wien-Logo.8d33c646.png\";","import React from \"react\";\n\nimport Logo from \"./img/TU-Wien-Logo.png\";\n\nimport \"../App.css\";\n\nconst Introbox = () => {\n  return (\n    <>\n      <section style={{ textAlign: \"center\" }}>\n        <div className=\"container\">\n          <div className=\"row\">\n            <img\n              style={{ float: \"left\", width: 200, height: \"auto\", marginTop: \"1rem\" }}\n              src={Logo}\n              alt=\"TU Wien Logo\"\n            />\n          </div>\n\n          <div className=\"row\">\n            <h1 style={{ fontSize: \"4rem\", textTransform: \"uppercase\", marginBottom: 0 }}>Reifegradmodell</h1>\n            <h2 style={{ marginTop: 8 }}>der Instandhaltung</h2>\n          </div>\n          <div className=\"row\">\n            <p style={{ marginTop: 24 }}>\n              Mit diesem Tool ist es möglich den unternehmenseigenen Reifegrad der Instandhaltung zu berechnen.\n              <br />\n              Es werden vier Faktoren: Datenqualität D<sub>Q</sub>, Informationsqualität I<sub>Q</sub>, Wissensqualität\n              K<sub>Q</sub> und Instandhaltungsqualität K<sub>Q</sub> zur Berechnung herangezogen. <br />\n              Visuell unterstützt werden die Ergebnisse mit interaktiven Diagrammen.\n            </p>\n          </div>\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default Introbox;\n","import React from \"react\";\nimport { Card } from \"antd\";\nimport { StarFilled } from \"@ant-design/icons\";\n\nconst Result = (props: { maturityLevel: number }) => {\n  const calculateMaturityStage = () => {\n    let maturityStage = \"nicht berechnet\";\n    if (props.maturityLevel <= 0.15) {\n      return (maturityStage = \"I\");\n    } else if (0.15 < props.maturityLevel && props.maturityLevel <= 0.55) {\n      return (maturityStage = \"II\");\n    } else if (0.56 < props.maturityLevel && props.maturityLevel <= 0.86) {\n      return (maturityStage = \"III\");\n    } else if (0.87 < props.maturityLevel && props.maturityLevel <= 1) {\n      return (maturityStage = \"IV\");\n    } else {\n      return maturityStage;\n    }\n  };\n\n  const colorIcon = () => {\n    let iconColor = \"#FFFFFF\";\n    if (props.maturityLevel <= 0.15) {\n      return (iconColor = \"#FF0000\");\n    } else if (0.15 < props.maturityLevel && props.maturityLevel <= 0.55) {\n      return (iconColor = \"#ff8e03\");\n    } else if (0.56 < props.maturityLevel && props.maturityLevel <= 0.86) {\n      return (iconColor = \"#FFE000\");\n    } else if (0.87 < props.maturityLevel && props.maturityLevel <= 1) {\n      return (iconColor = \"#4EEE94\");\n    } else {\n      return iconColor;\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <section style={{ marginTop: 40, textAlign: \"center\", backgroundColor: \"#e6f5ff\", padding: 40 }}>\n        <div className=\"row\">\n          <div>\n            <h1 style={{ fontSize: \"2em\", textTransform: \"uppercase\", textDecoration: \"underline\" }}>Ergebnis</h1>\n          </div>\n          <div>\n            <p>Hier wird der berechnete Reifegrad gemäß Ihrer Angaben aufgeführt.</p>\n          </div>\n          <div style={{ marginTop: 40 }}>\n            <Card title=\"Ihr momentaner Reifegrad\" style={{ width: 300, margin: \"auto\" }}>\n              <p>{(props.maturityLevel * 100).toFixed(2)} %</p>\n              <span style={{ fontStyle: \"italic\", fontWeight: \"bold\", fontSize: 16 }}>\n                Reifegrad {calculateMaturityStage()}\n              </span>\n              <span style={{ marginLeft: 8 }}>\n                <StarFilled style={{ color: colorIcon() }} />\n              </span>\n            </Card>\n            <div style={{ fontSize: 10, overflow: \"hidden\", textOverflow: \"ellipsis\", width: \" 100%\", marginTop: 16 }}>\n              RG I ... 0-15%, RG II ... 16-55%, RG III ... 56-86%, RG IV ... 87-100%\n            </div>\n          </div>\n        </div>\n      </section>\n    </React.Fragment>\n  );\n};\n\nexport default Result;\n","import { Checkbox, Form, Input, InputNumber } from \"antd\";\nimport React from \"react\";\nimport { ITableColumn } from \"./Table\";\n\nexport interface ITableRowInitialValues {\n  description: string;\n  values: (number | undefined)[];\n}\n\nexport function TableRow(props: {\n  columns: ITableColumn[];\n  row: number;\n  tableID: string;\n  sourceInputPlaceholder: string;\n  reset: number;\n  initialValues?: ITableRowInitialValues;\n  onActiveChange?(active: boolean): void;\n}) {\n  const [form] = Form.useForm();\n  const [active, setActive] = React.useState<boolean>(true);\n  const [sum, setSum] = React.useState<number>(0);\n\n  React.useEffect(() => {\n    if (form) {\n      form.resetFields();\n    }\n    setSum(0);\n    setActive(true);\n  }, [form, props.reset]);\n\n  function handleFieldValuesChange(values: any) {\n    let total = 0;\n    let totalWeights = 0;\n\n    if (values.active) {\n      // eslint-disable-next-line\n      for (const [_key, value] of Object.entries(values)) {\n        if (Number.isFinite(value)) {\n          let qi = value as number;\n\n          if (qi <= 0.5) {\n            total += qi * 1.3;\n            totalWeights += 1.3;\n          } else {\n            total += qi;\n            totalWeights += 1;\n          }\n        }\n      }\n\n      if (totalWeights) {\n        setSum(total / totalWeights);\n      }\n    }\n  }\n\n  React.useEffect(() => {\n    if (form && props.initialValues) {\n      form.resetFields();\n      const defaultValues: any = {};\n      props.columns.forEach((column, index) => {\n        defaultValues[column.name] = props.initialValues?.values[index];\n      });\n      defaultValues.description = props.initialValues?.description;\n      form.setFieldsValue(defaultValues);\n      // form.validateFields();\n      handleFieldValuesChange(form.getFieldsValue());\n      form.submit();\n    }\n    setActive(true);\n  }, [props.initialValues, props.columns, form]);\n\n  return (\n    <Form\n      form={form}\n      name={props.tableID + \"_\" + props.row.toString()}\n      style={{\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${2 + props.columns.length + 1}, 1fr)`,\n        justifyItems: \"center\",\n        columnGap: 16,\n        rowGap: 16\n      }}\n      onValuesChange={(_, values) => {\n        handleFieldValuesChange(values);\n      }}\n      initialValues={{\n        active: true,\n        description: `${props.sourceInputPlaceholder} ${props.row + 1}`\n      }}\n    >\n      <Form.Item name=\"description\">\n        <Input style={{ marginTop: 6 }} />\n      </Form.Item>\n\n      <Form.Item name=\"active\" valuePropName=\"checked\">\n        <Checkbox\n          style={{ marginTop: 6 }}\n          checked={active}\n          onChange={(event) => {\n            setActive(event.target.checked);\n            if (props.onActiveChange) {\n              props.onActiveChange(event.target.checked);\n            }\n          }}\n        />\n      </Form.Item>\n\n      {props.columns.map((column, index) => {\n        return (\n          <Form.Item\n            key={index}\n            name={column.name}\n            rules={[{ required: false, message: \"Zahl zwischen 0 & 1 mit 2 Dezimalstellen\" }]}\n          >\n            <InputNumber\n              disabled={!active}\n              key={props.tableID + \"_\" + index}\n              size=\"small\"\n              min=\"0\"\n              max=\"1\"\n              step=\"0.01\"\n              precision={2}\n            />\n          </Form.Item>\n        );\n      })}\n      <div key={props.tableID + \"_\"} style={{ height: \"24px\", marginTop: 4, color: active ? \"#000\" : \"#ccc\" }}>\n        {sum.toFixed(2)}\n      </div>\n    </Form>\n  );\n}\n","import { Form, InputNumber } from \"antd\";\nimport React from \"react\";\nimport { ITableColumn } from \"./Table\";\n\nexport function TableRowTargetvalue(props: {\n  columns: ITableColumn[];\n  row: number;\n  rowTitle: string;\n  tableID: string;\n  reset: number;\n}) {\n  //reset does not work\n  const [form] = Form.useForm();\n\n  React.useEffect(() => {\n    if (form) {\n      form.resetFields();\n    }\n  }, [form, props.reset]);\n\n  return (\n    <Form\n      form={form}\n      style={{\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${2 + props.columns.length + 1}, 1fr)`,\n        justifyItems: \"center\",\n        columnGap: 16\n      }}\n      name=\"targetValues\"\n    >\n      <span\n        style={{\n          fontWeight: \"bold\",\n          textDecoration: \"underline\",\n          marginTop: 6,\n          overflow: \"hidden\",\n          textOverflow: \"ellipsis\",\n          width: \" 100%\"\n        }}\n      >\n        {props.rowTitle}\n      </span>\n      <div />\n      {props.columns.map((column, index) => {\n        return (\n          <Form.Item\n            key={index}\n            name={props.tableID + \"_targetValue_\" + column.name}\n            rules={[{ required: false, type: \"regexp\", message: \"TODO\" }]}\n          >\n            <InputNumber key={props.tableID + \"_\" + index} size=\"small\" min=\"0\" max=\"1\" step=\"0.01\" precision={2} />\n          </Form.Item>\n        );\n      })}\n    </Form>\n  );\n}\n","import React from \"react\";\n\nexport function TableRowAggregation(props: { values: string[]; tableID: string }) {\n  return (\n    <div\n      style={{\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${2 + props.values.length + 1}, 1fr)`,\n        justifyItems: \"center\",\n        columnGap: 16,\n        rowGap: 16\n      }}\n    >\n      <span\n        style={{\n          fontWeight: \"bold\",\n          textDecoration: \"underline\",\n          marginTop: 6,\n          overflow: \"hidden\",\n          textOverflow: \"ellipsis\",\n          width: \" 100%\"\n        }}\n      >\n        Aggregation\n      </span>\n      <div />\n      {props.values.map((value, index) => {\n        return (\n          <div style={{ height: \"24px\" }} key={props.tableID + \"_\" + index}>\n            {value}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","import { Button, Form, Divider, Card, Popconfirm, message, Modal, Upload, FormInstance } from \"antd\";\nimport React from \"react\";\nimport { ITableRowInitialValues, TableRow } from \"./TableRow\";\nimport { TableRowTargetvalue } from \"./TableRowTargetvalue\";\nimport { TableRowAggregation } from \"./TableRowAggregation\";\nimport Chart from \"react-apexcharts\";\nimport { WarningOutlined, StarFilled, DownloadOutlined, UploadOutlined, InboxOutlined } from \"@ant-design/icons\";\nimport { UploadFile } from \"antd/lib/upload/interface\";\nimport Papa from \"papaparse\";\n\nexport interface ITableColumn {\n  name: string;\n  weight: number;\n}\n\nexport interface tableLegend {\n  shortcut: string;\n  name: string;\n}\n\nexport function Table(props: {\n  title: string;\n  sourceTitle: string;\n  sourceInputPlaceholder: string;\n  description: React.ReactNode;\n  backgroundColor: string;\n  columns: ITableColumn[];\n  resultTitle: string;\n  resultInitials: string;\n  rowsCount: number;\n  tableID: string;\n  tableLegend: tableLegend[];\n  maturityWeight: number;\n  onQualityLevelChange(value: number): void;\n}) {\n  const initialSums: number[] = [];\n  for (let i = 0; i < props.columns.length; i++) {\n    initialSums.push(0);\n  }\n\n  const initialSumsRows: number[] = [];\n  for (let i = 0; i < props.rowsCount; i++) {\n    initialSumsRows.push(0);\n  }\n\n  const initialRowDescriptions: string[] = [];\n  for (let i = 0; i < props.rowsCount; i++) {\n    initialRowDescriptions.push(`${props.sourceInputPlaceholder} ${i + 1}`);\n  }\n\n  const [sums, setSums] = React.useState<number[]>(initialSums);\n  const [rowSums, setRowSums] = React.useState<number[]>(initialSumsRows);\n  const [rowDescriptions, setRowDescription] = React.useState<string[]>(initialRowDescriptions);\n  const [reset, setReset] = React.useState<number>(0);\n  const [targetValues, setTargetValues] = React.useState<number[]>([]);\n  const [isModalVisible, setIsModalVisible] = React.useState<boolean>(false);\n  const [csvFile, setCsvFile] = React.useState<UploadFile | null>(null);\n  const [csvFileRowsCount, setCsvFileRowsCount] = React.useState<number>(0);\n  const [initialValues, setInitialValues] = React.useState<ITableRowInitialValues[]>([]);\n  const [currentForms, setCurrentForms] = React.useState<any>();\n\n  // Calculate Metrics: DQ, IQ, KQ\n  const calculateMetric = () => {\n    let totalMetric = 0;\n\n    sums.forEach((sum, index) => {\n      const weightedSum = props.columns[index].weight * sum;\n\n      totalMetric += weightedSum;\n    });\n\n    return totalMetric;\n  };\n\n  const colorIcon = () => {\n    let totalMetric = 0;\n    let iconColor = \"#FFFFFF\";\n\n    sums.forEach((sum, index) => {\n      const weightedSum = props.columns[index].weight * sum;\n\n      totalMetric += weightedSum;\n    });\n\n    if (totalMetric <= 0.5) {\n      return (iconColor = \"#FF0000\");\n    } else if (0.51 < totalMetric && totalMetric <= 0.66) {\n      return (iconColor = \"#ff8e03\");\n    } else if (0.67 < totalMetric && totalMetric <= 0.82) {\n      return (iconColor = \"#FFE000\");\n    } else if (0.83 < totalMetric && totalMetric <= 1.03) {\n      return (iconColor = \"#4EEE94\");\n    } else {\n      return iconColor;\n    }\n  };\n\n  // Upload Modal\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const handleOk = () => {\n    setIsModalVisible(false);\n\n    if (csvFile && csvFile.originFileObj) {\n      Papa.parse<string[]>(csvFile.originFileObj, {\n        complete: function (results) {\n          let csvDataForTable: ITableRowInitialValues[] = [];\n\n          results.data.forEach((e, index) => {\n            if (index === 0 || e.length < 2) {\n              console.log(\"Heading or empty row!\");\n            } else if (index > 0 && e.length <= props.columns.length + 1) {\n              const newItem: ITableRowInitialValues = { description: e[0], values: [] };\n\n              for (let j = 1; j < e.length; j++) {\n                if (e[j] === \"\") {\n                  newItem.values.push(undefined);\n                } else {\n                  newItem.values.push(parseFloat(e[j]));\n                }\n              }\n              csvDataForTable.push(newItem);\n            }\n          });\n          setCsvFileRowsCount(csvDataForTable.length);\n          setInitialValues(csvDataForTable);\n        }\n      });\n    }\n\n    setCsvFile(null);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n    setCsvFile(null);\n  };\n\n  // Download csv\n  const csvDownload = () => {\n    const data: (string | number)[][] = [];\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    for (const [formName, form] of Object.entries(currentForms)) {\n      if (formName !== \"targetValues\") {\n        const f: FormInstance = form as any;\n\n        const csvRowArray: (string | number)[] = [];\n        const formValues = f.getFieldsValue();\n\n        csvRowArray.push(formValues.description);\n        props.columns.forEach((column, index) => {\n          csvRowArray.push(formValues[column.name]);\n        });\n\n        data.push(csvRowArray);\n      }\n    }\n\n    const headings = props.columns.map((column) => {\n      return column.name;\n    });\n\n    headings.unshift(props.sourceTitle);\n\n    // create csv and unparse stuff\n    const blob = new Blob([Papa.unparse({ data: data, fields: headings })]);\n\n    const a = document.createElement(\"a\");\n    a.href = URL.createObjectURL(blob);\n    a.download = `${props.title}_CSV_Export_File.csv`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n  };\n\n  const { Dragger } = Upload;\n\n  // Metric Chart Categories\n  let categoriesMetricChart = props.columns.map((a) => a.name);\n\n  const forms = Array.from(\n    { length: props.rowsCount > csvFileRowsCount ? props.rowsCount : csvFileRowsCount },\n    (x, i) => i\n  ).map((row) => {\n    return (\n      <TableRow\n        key={row}\n        columns={props.columns}\n        row={row}\n        sourceInputPlaceholder={props.sourceInputPlaceholder}\n        tableID={props.tableID}\n        reset={reset}\n        initialValues={initialValues[row]}\n      />\n    );\n  });\n\n  return (\n    <div style={{ textAlign: \"center\", background: props.backgroundColor, padding: 40, marginTop: 40 }}>\n      <h1 style={{ textTransform: \"uppercase\" }}>{props.title}</h1>\n      <p>{props.description}</p>\n\n      <div style={{ justifyContent: \"flex-end\", display: \"flex\", marginTop: 16 }}>\n        <span style={{ textAlign: \"center\", marginRight: 20, marginTop: 10 }}>.csv</span>\n        <Button\n          onClick={showModal}\n          type=\"primary\"\n          icon={<UploadOutlined />}\n          size={\"large\"}\n          style={{ marginRight: 16 }}\n        />\n        <Modal\n          title={\".csv Upload - \" + props.title}\n          visible={isModalVisible}\n          onOk={handleOk}\n          onCancel={handleCancel}\n          destroyOnClose\n        >\n          <Dragger\n            accept=\".csv\"\n            beforeUpload={() => false}\n            multiple={false}\n            maxCount={1}\n            name=\"file\"\n            onChange={(info) => {\n              if (info.fileList.length > 0) {\n                const file = info.fileList[0];\n                setCsvFile(file);\n              }\n            }}\n          >\n            <p className=\"ant-upload-drag-icon\">\n              <InboxOutlined />\n            </p>\n            <p className=\"ant-upload-text\">Fügen Sie Dateien per Klick oder Drag and Drop hinzu.</p>\n            <p className=\"ant-upload-hint\">Es sind nur .csv Dateien erlaubt.</p>\n          </Dragger>\n        </Modal>\n\n        <Button onClick={csvDownload} type=\"primary\" icon={<DownloadOutlined />} size={\"large\"} />\n      </div>\n\n      <div\n        style={{\n          marginTop: 40,\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${2 + props.columns.length + 1}, 1fr)`,\n          justifyItems: \"center\",\n          columnGap: 16,\n          rowGap: 4\n        }}\n      >\n        <span\n          style={{\n            fontWeight: \"bold\",\n            textDecoration: \"underline\",\n            overflow: \"hidden\",\n            textOverflow: \"ellipsis\",\n            width: \" 100%\"\n          }}\n        >\n          {props.sourceTitle}\n        </span>\n        <span\n          style={{\n            fontWeight: \"bold\",\n            textDecoration: \"underline\",\n            overflow: \"hidden\",\n            textOverflow: \"ellipsis\",\n            width: \" 100%\"\n          }}\n        >\n          An/Aus\n        </span>\n        {props.columns.map((column, index) => {\n          return (\n            <span\n              style={{ fontWeight: \"bold\", overflow: \"hidden\", textOverflow: \"ellipsis\", width: \" 100%\" }}\n              key={index}\n            >\n              {column.name}\n            </span>\n          );\n        })}\n\n        <span\n          style={{\n            fontWeight: \"bold\",\n            textDecoration: \"underline\",\n            overflow: \"hidden\",\n            textOverflow: \"ellipsis\",\n            width: \" 100%\"\n          }}\n        >\n          Aggregation\n        </span>\n      </div>\n\n      <Form.Provider\n        onFormChange={(name, info) => {\n          setCurrentForms(info.forms);\n          if (name === \"targetValues\") {\n            const targetValuesForm = info.forms.targetValues;\n            const targetValues: number[] = [];\n\n            props.columns.forEach((column, index) => {\n              const formTargetValue = targetValuesForm.getFieldValue(props.tableID + \"_targetValue_\" + column.name);\n              if (formTargetValue !== undefined) {\n                targetValues[index] = formTargetValue;\n              } else {\n                targetValues[index] = 0;\n              }\n            });\n\n            setTargetValues(targetValues);\n          } else {\n            const sums: number[] = [];\n\n            for (let i = 0; i < props.columns.length; i++) {\n              sums[i] = 0;\n            }\n\n            // Calculate Aggregation Columns\n            props.columns.forEach((column, index) => {\n              let totalColumn = 0;\n              let totalColumnWeights = 0;\n\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              for (const [_formName, form] of Object.entries(info.forms)) {\n                if (form.getFieldValue(\"active\")) {\n                  const formColumnValue = form.getFieldValue(column.name);\n\n                  if (formColumnValue !== undefined) {\n                    if (formColumnValue <= 0.5) {\n                      totalColumn += formColumnValue * 1.3;\n                      totalColumnWeights += 1.3;\n                    } else {\n                      totalColumn += formColumnValue;\n                      totalColumnWeights += 1;\n                    }\n                    sums[index] = totalColumn / totalColumnWeights;\n                  }\n                }\n              }\n            });\n            setSums(sums);\n\n            // Calculate Row Aggregation for Chart\n            const newRowSums = [];\n            const newRowDescriptions = [];\n\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            for (const [formName, form] of Object.entries(info.forms)) {\n              if (formName !== \"targetValues\") {\n                let rowColumn = 0;\n                let rowColumnWeights = 0;\n\n                if (form.getFieldValue(\"active\")) {\n                  props.columns.forEach((column, index) => {\n                    const formColumnValue = form.getFieldValue(column.name);\n\n                    if (Number.isFinite(formColumnValue)) {\n                      if (formColumnValue <= 0.5) {\n                        rowColumn += formColumnValue * 1.3;\n                        rowColumnWeights += 1.3;\n                      } else {\n                        rowColumn += formColumnValue;\n                        rowColumnWeights += 1;\n                      }\n                    }\n                  });\n\n                  newRowDescriptions.push(form.getFieldValue(\"description\"));\n\n                  if (rowColumnWeights) {\n                    newRowSums.push(rowColumn / rowColumnWeights);\n                  } else {\n                    newRowSums.push(0);\n                  }\n                }\n              }\n            }\n\n            setRowSums(newRowSums);\n            setRowDescription(newRowDescriptions);\n          }\n\n          props.onQualityLevelChange(calculateMetric() * props.maturityWeight);\n        }}\n      >\n        {forms}\n\n        <Divider />\n\n        <TableRowAggregation values={sums.map((i) => i.toFixed(2))} tableID={props.tableID} />\n        <TableRowTargetvalue\n          columns={props.columns}\n          row={props.rowsCount + 1}\n          rowTitle={\"Sollwert\"}\n          tableID={props.tableID}\n          reset={reset}\n        />\n\n        <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n          <Popconfirm\n            icon={<WarningOutlined style={{ color: \"red\" }} />}\n            title=\"Wollen Sie die Werte dieses Abschnitts wirklich zurücksetzen?\"\n            okText=\"OK\"\n            cancelText=\"Abbrechen\"\n            onConfirm={() => {\n              for (let i = 0; i < props.columns.length; i++) {\n                sums[i] = 0;\n              }\n              setRowSums(initialSumsRows);\n              setTargetValues([]);\n              setRowDescription(initialRowDescriptions);\n              props.onQualityLevelChange(0);\n              setReset(reset + 1);\n              message.success(\"Daten wurden erfolgreich zurückgesetzt!\");\n            }}\n          >\n            <Button type=\"text\" danger style={{ marginRight: 16, marginTop: 24 }}>\n              Zurücksetzen\n            </Button>\n          </Popconfirm>\n        </div>\n\n        <div style={{ textAlign: \"center\", marginTop: 4 }}>\n          {props.tableLegend.map((term, index) => {\n            return (\n              <span style={{ fontSize: 10, overflow: \"hidden\", textOverflow: \"ellipsis\", width: \" 100%\" }} key={index}>\n                {term.shortcut + \"...\" + term.name + \", \"}\n              </span>\n            );\n          })}\n        </div>\n\n        <Divider />\n\n        <div style={{ display: \"flex\", flexWrap: \"wrap\", justifyContent: \"space-between\", marginTop: 40 }}>\n          <Chart\n            // Metric Chart\n            options={{\n              chart: {\n                id: props.resultInitials + \"IndikatorenDiagramm\"\n              },\n              xaxis: {\n                categories: categoriesMetricChart,\n                labels: {\n                  show: true,\n                  style: {\n                    colors: [\"#000\", \"#000\", \"#000\", \"#000\", \"#000\", \"#000\", \"#000\", \"#000\", \"#000\", \"#000\"],\n                    fontSize: \"12px\"\n                  }\n                }\n              },\n              yaxis: {\n                forceNiceScale: true,\n                min: 0,\n                max: 1,\n                labels: {\n                  maxWidth: 1,\n                  style: {\n                    colors: [\"#000\"]\n                  },\n                  formatter: function (val, index) {\n                    return val.toFixed(2);\n                  }\n                }\n              },\n              legend: {\n                markers: {\n                  fillColors: [\"#ff8e03\", \"#0a9bf0\"]\n                }\n              },\n              stroke: {\n                show: true,\n                colors: [\"#ff8e03\", \"#0a9bf0\"]\n              },\n              fill: {\n                colors: [\"#ff8e03\", \"#0a9bf0\"],\n                opacity: 0.1\n              },\n              markers: {\n                size: 4,\n                colors: [\"#ff8e03\", \"#0a9bf0\"],\n                hover: {\n                  size: 6\n                }\n              },\n              plotOptions: {\n                radar: {\n                  size: 140,\n                  polygons: {\n                    strokeColors: \"#9D9F9E\",\n                    connectorColors: \"#9D9F9E\"\n                  }\n                }\n              },\n              title: {\n                text: `${props.resultInitials} Indikatoren Diagramm`\n              }\n            }}\n            series={[\n              {\n                name: `${props.resultInitials} Indikatoren`,\n                data: sums\n              },\n              { name: `${props.resultInitials} Sollwerte`, data: targetValues }\n            ]}\n            type=\"radar\"\n            width=\"700\"\n            key={reset + \"a\"}\n          />\n\n          <Card style={{ width: 300, margin: \"auto\" }} title={props.resultTitle}>\n            <span style={{ margin: 0 }}>\n              {props.resultInitials} = {calculateMetric().toFixed(2)}\n            </span>\n            <span style={{ marginLeft: 8 }}>\n              <StarFilled style={{ color: colorIcon() }} />\n            </span>\n          </Card>\n\n          <Chart\n            // Source Chart\n            options={{\n              chart: {\n                id: props.sourceTitle + \"Diagramm\"\n              },\n              xaxis: {\n                categories: rowDescriptions,\n                labels: {\n                  show: true,\n                  style: {\n                    colors: [\n                      \"#000\",\n                      \"#000\",\n                      \"#000\",\n                      \"#000\",\n                      \"#000\",\n                      \"#000\",\n                      \"#000\",\n                      \"#000\",\n                      \"#000\",\n                      \"#000\",\n                      \"#000\",\n                      \"#000\",\n                      \"#000\",\n                      \"#000\",\n                      \"#000\"\n                    ],\n                    fontSize: \"12px\"\n                  }\n                }\n              },\n              yaxis: {\n                forceNiceScale: true,\n                min: 0,\n                max: 1,\n                labels: {\n                  maxWidth: 1,\n                  style: {\n                    colors: [\"#000\"]\n                  },\n                  formatter: function (val, index) {\n                    return val.toFixed(2);\n                  }\n                }\n              },\n              legend: {\n                showForSingleSeries: true,\n                markers: {\n                  fillColors: [\"#4EEE94\"]\n                }\n              },\n              stroke: {\n                show: true,\n                colors: [\"#4EEE94\"]\n              },\n              fill: {\n                colors: [\"#4EEE94\"],\n                opacity: 0.1\n              },\n              markers: {\n                size: 4,\n                colors: [\"#4EEE94\"],\n                hover: {\n                  size: 6\n                }\n              },\n              plotOptions: {\n                radar: {\n                  size: 140,\n                  polygons: {\n                    strokeColors: \"#9D9F9E\",\n                    connectorColors: \"#9D9F9E\"\n                  }\n                }\n              },\n              title: {\n                text: `${props.sourceTitle} Diagramm`\n              }\n            }}\n            series={[\n              {\n                name: `${props.resultInitials} Quellen`,\n                data: rowSums\n              }\n            ]}\n            type=\"radar\"\n            width=\"700\"\n            key={reset + \"b\"}\n          />\n        </div>\n      </Form.Provider>\n    </div>\n  );\n}\n","import { Form, Checkbox, Input, InputNumber } from \"antd\";\nimport React from \"react\";\n\nexport interface ITableRowInitialValues {\n  description: string;\n  values: (number | undefined)[];\n}\n\nexport function calculateFulfilment(actualValue: number, targetValue: number): number {\n  if (targetValue === 0) {\n    return 0;\n  } else if (actualValue <= targetValue) {\n    return (actualValue / targetValue) * 100;\n  } else if (targetValue < actualValue) {\n    return (targetValue / actualValue) * 100;\n  } else {\n    console.error(\"Something went wrong!\");\n    return 0;\n  }\n}\n\nexport function TableMQRow(props: {\n  row: number;\n  isKpiRow: boolean;\n  step: string;\n  defaultValueName: string;\n  defaultValueTarget?: number;\n  tableID: string;\n  perspective: string;\n  reset: number;\n  initialValues?: ITableRowInitialValues;\n  onActiveChange?(active: boolean): void;\n}) {\n  const [form] = Form.useForm();\n  const [active, setActive] = React.useState<boolean>(true);\n  const [fulfilment, setFulfilment] = React.useState<number>(0);\n\n  React.useEffect(() => {\n    if (form) {\n      form.resetFields();\n    }\n    setFulfilment(0);\n    setActive(true);\n  }, [form, props.reset]);\n\n  React.useEffect(() => {\n    if (form) {\n      if (props.initialValues) {\n        form.resetFields();\n\n        const actualValue = props.initialValues.values[0]!;\n        const targetValue = props.initialValues.values[1]!;\n\n        form.setFieldsValue({\n          description: props.initialValues.description,\n          actualValue: actualValue,\n          targetValue: targetValue,\n          active: true\n        });\n        setFulfilment(calculateFulfilment(actualValue, targetValue));\n\n        // form.validateFields();\n        form.submit();\n      }\n    }\n    setActive(true);\n  }, [props.initialValues, form]);\n\n  return (\n    <Form\n      form={form}\n      name={props.tableID + \"_\" + props.perspective + \"_\" + props.row}\n      style={{ gridRow: `${props.row}`, gridColumn: 2 }}\n      onValuesChange={(_, values) => {\n        let actualValue: number = form.getFieldValue(\"actualValue\") || 0;\n        let targetValue: number = form.getFieldValue(\"targetValue\") || 0;\n\n        // console.log(\"rowValues\", actualValue, targetValue);\n        console.log(\"Fulfilment\");\n        setFulfilment(calculateFulfilment(actualValue, targetValue));\n      }}\n      initialValues={{\n        active: true,\n        step: props.step,\n        description: props.defaultValueName,\n        actualValue: \"\",\n        targetValue: props.defaultValueTarget || \"\"\n      }}\n    >\n      <div\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: \"repeat(6,  1fr)\",\n          justifyContent: \"center\",\n          columnGap: 16\n        }}\n      >\n        <Form.Item name=\"active\" valuePropName=\"checked\">\n          <Checkbox\n            style={{ marginTop: 4 }}\n            checked={active}\n            onChange={(event) => {\n              setActive(event.target.checked);\n              if (props.onActiveChange) {\n                props.onActiveChange(event.target.checked);\n              }\n            }}\n          />\n        </Form.Item>\n\n        <Form.Item name=\"step\">\n          <div>\n            <Input disabled style={{ display: \"none\" }} />\n            <div>{props.step}</div>\n          </div>\n        </Form.Item>\n\n        <Form.Item name=\"description\">\n          <Input disabled={active ? props.isKpiRow : !active} />\n        </Form.Item>\n        <Form.Item name=\"actualValue\">\n          <InputNumber\n            disabled={!active}\n            key={props.tableID + \"_\" + props.perspective + \"_\" + props.row + \"_actualValue\"}\n            size=\"small\"\n          />\n        </Form.Item>\n        <Form.Item name=\"targetValue\">\n          <InputNumber\n            disabled={active ? props.isKpiRow : !active}\n            key={props.tableID + \"_\" + props.perspective + \"_\" + props.row + \"_targetValue\"}\n          />\n        </Form.Item>\n        <Form.Item name=\"fulfilment\">\n          <div key={props.tableID + \"_fulfilment_\" + props.row} style={{ color: active ? \"#000\" : \"#ccc\" }}>\n            {fulfilment.toFixed(0)} %\n          </div>\n        </Form.Item>\n      </div>\n    </Form>\n  );\n}\n","import { Divider, Form, Button, Popconfirm, message, Modal, Upload, FormInstance } from \"antd\";\nimport React from \"react\";\nimport Chart from \"react-apexcharts\";\nimport { calculateFulfilment, TableMQRow, ITableRowInitialValues } from \"./TableMQRow\";\nimport { WarningOutlined, DownloadOutlined, UploadOutlined, InboxOutlined } from \"@ant-design/icons\";\nimport { UploadFile } from \"antd/lib/upload/interface\";\nimport Papa from \"papaparse\";\n\nexport interface tableLegend {\n  shortcut: string;\n  name: string;\n}\n\nexport function TableMQPerspective(props: {\n  perspective: string;\n  tableID: string;\n  kpiRowCount: number;\n  defaultValueName: string[];\n  defaultValueTarget: number[];\n  piRowCount: number;\n  defaultValuePIName: string;\n  tableLegend: tableLegend[];\n  columns: string[];\n  onAggregationChange(value: number): void;\n}) {\n  const initialMqRowDescriptions: string[] = [];\n  for (let i = 0; i < props.kpiRowCount + props.piRowCount; i++) {\n    initialMqRowDescriptions.push(props.defaultValueName[i]);\n  }\n\n  const initialFulfilment: number[] = [];\n  for (let i = 0; i < props.kpiRowCount + props.piRowCount; i++) {\n    initialFulfilment.push(0);\n  }\n\n  const [aggregationSum, setAggregationSum] = React.useState<number>(0);\n  const [mqRowDescriptions, setMqRowDescriptions] = React.useState<string[]>(initialMqRowDescriptions);\n  const [fulfilment, setFulfilment] = React.useState<number[]>(initialFulfilment);\n  const [reset, setReset] = React.useState<number>(0);\n  const [isModalVisible, setIsModalVisible] = React.useState<boolean>(false);\n  const [csvFile, setCsvFile] = React.useState<UploadFile | null>(null);\n  const [csvFileRowsCount, setCsvFileRowsCount] = React.useState<number>(0);\n  const [initialValues, setInitialValues] = React.useState<ITableRowInitialValues[]>([]);\n  const [currentForms, setCurrentForms] = React.useState<any>();\n\n  // Upload Modal\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const handleOk = () => {\n    setIsModalVisible(false);\n\n    if (csvFile && csvFile.originFileObj) {\n      Papa.parse<string[]>(csvFile.originFileObj, {\n        complete: function (results) {\n          let csvDataForTable: ITableRowInitialValues[] = [];\n\n          results.data.forEach((e, index) => {\n            if (index === 0 || e.length < 2) {\n              console.log(\"Heading or empty row!\");\n            } else if (index > 0 && e.length <= props.columns.length - 3) {\n              const newItem: ITableRowInitialValues = { description: e[0], values: [] };\n              //umbauen auf description, actualValue und targetValue?!\n\n              for (let j = 1; j < e.length; j++) {\n                if (e[j] === \"\") {\n                  newItem.values.push(undefined);\n                } else {\n                  newItem.values.push(parseFloat(e[j]));\n                }\n              }\n              csvDataForTable.push(newItem);\n            }\n          });\n\n          setCsvFileRowsCount(csvDataForTable.length);\n          setInitialValues(csvDataForTable);\n        }\n      });\n    }\n\n    setCsvFile(null);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n    setCsvFile(null);\n  };\n\n  // Download csv\n\n  const csvDownload = () => {\n    const data: (string | number)[][] = [];\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    for (const [formName, form] of Object.entries(currentForms)) {\n      const f: FormInstance = form as any;\n\n      const csvRowArray: (string | number)[] = [];\n      const formValues = f.getFieldsValue();\n\n      // how to only push the middle 3 fields?\n\n      csvRowArray.push(formValues.description, formValues.actualValue, formValues.targetValue);\n\n      data.push(csvRowArray);\n    }\n\n    const headings: string[] = [\"Kennzahl\", \"Ist, [%, €]\", \"Soll, [%, €]\"];\n\n    // create csv and unparse stuff\n    const blob = new Blob([Papa.unparse({ data: data, fields: headings })]);\n\n    const a = document.createElement(\"a\");\n    a.href = URL.createObjectURL(blob);\n    a.download = `${props.perspective}_CSV_Export_File.csv`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n  };\n\n  const { Dragger } = Upload;\n\n  const forms_KPI = Array.from({ length: props.kpiRowCount }, (x, i) => i).map((row, i) => {\n    return (\n      <TableMQRow\n        key={row}\n        row={row}\n        isKpiRow={true}\n        step=\"KPI\"\n        defaultValueName={props.defaultValueName[i]}\n        defaultValueTarget={props.defaultValueTarget[i]}\n        tableID={props.tableID}\n        perspective={props.perspective}\n        reset={reset}\n        initialValues={initialValues[row]}\n      />\n    );\n  });\n\n  const forms_PI = Array.from(\n    {\n      length:\n        props.piRowCount > csvFileRowsCount - props.kpiRowCount\n          ? props.piRowCount\n          : csvFileRowsCount - props.kpiRowCount\n    },\n    (x, i) => props.kpiRowCount + i\n  ).map((row) => {\n    return (\n      <TableMQRow\n        key={row}\n        row={row}\n        isKpiRow={false}\n        step=\"PI\"\n        defaultValueName={props.defaultValueName[row]}\n        tableID={props.tableID}\n        perspective={props.perspective}\n        reset={reset}\n        initialValues={initialValues[row]}\n      />\n    );\n  });\n\n  return (\n    <>\n      <Form.Provider\n        onFormChange={(name, info) => {\n          setCurrentForms(info.forms);\n          let totalKpi = 0;\n          let totalWeightsKpi = 0;\n          let sumKpi = 0;\n\n          let totalPi = 0;\n          let totalWeightsPi = 0;\n          let sumPi = 0;\n\n          const newMqRowDescriptions = [];\n          const newFulfilment: number[] = [];\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          for (const [_formName, form] of Object.entries(info.forms)) {\n            if (form.getFieldValue(\"active\")) {\n              const actualValue = form.getFieldValue(\"actualValue\") || 0;\n              const targetValue = form.getFieldValue(\"targetValue\");\n              if (Number.isFinite(form.getFieldValue(\"actualValue\"))) {\n                let qi = 1;\n                if (!Number.isFinite(targetValue) || targetValue === 0) {\n                  qi = 1;\n                } else if (actualValue > targetValue) {\n                  qi = targetValue / actualValue;\n                } else if (actualValue <= targetValue) {\n                  qi = actualValue / targetValue;\n                } else {\n                  console.error(\"Something went wrong in aggregation calculation!\");\n                }\n                if (form.getFieldValue(\"step\") === \"KPI\") {\n                  if (qi <= 0.5) {\n                    totalKpi += qi * 1.3;\n                    totalWeightsKpi += 1.3;\n                  } else {\n                    totalKpi += qi;\n                    totalWeightsKpi += 1;\n                  }\n\n                  if (totalWeightsKpi) {\n                    sumKpi = totalKpi / totalWeightsKpi;\n                  }\n                } else if (form.getFieldValue(\"step\") === \"PI\") {\n                  if (qi <= 0.5) {\n                    totalPi += qi * 1.3;\n                    totalWeightsPi += 1.3;\n                  } else {\n                    totalPi += qi;\n                    totalWeightsPi += 1;\n                  }\n\n                  if (totalWeightsPi) {\n                    sumPi = totalPi / totalWeightsPi;\n                  }\n                }\n              }\n              newFulfilment.push(calculateFulfilment(actualValue || 0, targetValue || 0));\n\n              setFulfilment(newFulfilment);\n\n              newMqRowDescriptions.push(form.getFieldValue(\"description\"));\n            }\n          }\n\n          const newSum = sumKpi * 0.66 + sumPi * 0.33;\n          setAggregationSum(newSum);\n          setMqRowDescriptions(newMqRowDescriptions);\n\n          props.onAggregationChange(newSum);\n        }}\n      >\n        <div>\n          <div style={{ justifyContent: \"flex-end\", display: \"flex\", marginTop: 16 }}>\n            <span style={{ textAlign: \"center\", marginRight: 20, marginTop: 10 }}>.csv</span>\n            <Button\n              onClick={showModal}\n              type=\"primary\"\n              icon={<UploadOutlined />}\n              size={\"large\"}\n              style={{ marginRight: 16 }}\n            />\n            <Modal\n              title={\".csv Upload - \" + props.perspective}\n              visible={isModalVisible}\n              onOk={handleOk}\n              onCancel={handleCancel}\n              destroyOnClose\n            >\n              <Dragger\n                accept=\".csv\"\n                beforeUpload={() => false}\n                multiple={false}\n                maxCount={1}\n                name=\"file\"\n                onChange={(info) => {\n                  if (info.fileList.length > 0) {\n                    const file = info.fileList[0];\n                    setCsvFile(file);\n                  }\n                }}\n              >\n                <p className=\"ant-upload-drag-icon\">\n                  <InboxOutlined />\n                </p>\n                <p className=\"ant-upload-text\">Fügen Sie Dateien per Klick oder Drag and Drop hinzu.</p>\n                <p className=\"ant-upload-hint\">Es sind nur .csv Dateien erlaubt. </p>\n              </Dragger>\n            </Modal>\n\n            <Button onClick={csvDownload} type=\"primary\" icon={<DownloadOutlined />} size={\"large\"} />\n          </div>\n\n          <div\n            style={{\n              marginBottom: 4,\n              fontWeight: \"bold\",\n              textDecoration: \"underline\"\n            }}\n          >\n            {props.perspective}\n          </div>\n\n          <div\n            style={{\n              display: \"grid\",\n              gridTemplateColumns: \"60% auto\",\n              gridAutoFlow: \"column\"\n            }}\n          >\n            <div>\n              <div\n                style={{\n                  display: \"grid\",\n                  gridTemplateColumns: `repeat(${props.columns.length}, 1fr)`,\n                  justifyItems: \"center\",\n                  columnGap: 8,\n                  marginTop: 40,\n                  marginBottom: 24\n                }}\n              >\n                {props.columns.map((column, index) => {\n                  return (\n                    <span style={{ fontWeight: \"bold\", marginLeft: 5, marginRight: 5 }} key={index}>\n                      {column}\n                    </span>\n                  );\n                })}\n              </div>\n\n              {forms_KPI}\n              {forms_PI}\n\n              <div style={{ marginTop: 20 }}>Aggregation: {aggregationSum.toFixed(2)} </div>\n              <div style={{ textAlign: \"center\", marginTop: 4 }}>\n                {props.tableLegend.map((term, index) => {\n                  return (\n                    <span\n                      style={{ fontSize: 10, overflow: \"hidden\", textOverflow: \"ellipsis\", width: \" 100%\" }}\n                      key={index}\n                    >\n                      {term.shortcut + \"...\" + term.name + \", \"}\n                    </span>\n                  );\n                })}\n              </div>\n              <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n                <Popconfirm\n                  icon={<WarningOutlined style={{ color: \"red\" }} />}\n                  title=\"Wollen Sie die Werte dieser Perspektive wirklich zurücksetzen?\"\n                  okText=\"OK\"\n                  cancelText=\"Abbrechen\"\n                  onConfirm={() => {\n                    setAggregationSum(0);\n                    setMqRowDescriptions(initialMqRowDescriptions);\n                    setFulfilment(initialFulfilment);\n                    setReset(reset + 1);\n\n                    props.onAggregationChange(0);\n                    message.success(\"Daten wurden erfolgreich zurückgesetzt!\");\n                  }}\n                >\n                  <Button type=\"text\" danger style={{ marginRight: 16, marginTop: 24 }}>\n                    Zurücksetzen\n                  </Button>\n                </Popconfirm>\n              </div>\n            </div>\n\n            {mqRowDescriptions.length === fulfilment.length && (\n              <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n                <Chart\n                  // Perspective Chart\n                  options={{\n                    chart: {\n                      id: props.perspective + \"Diagramm\"\n                    },\n                    xaxis: {\n                      categories: mqRowDescriptions,\n                      labels: {\n                        show: true,\n                        style: {\n                          colors: [\"#000\", \"#000\", \"#000\", \"#000\", \"#000\", \"#000\"],\n                          fontSize: \"12px\"\n                        }\n                      }\n                    },\n                    yaxis: {\n                      forceNiceScale: true,\n                      min: 0,\n                      max: 95,\n                      labels: {\n                        maxWidth: 1,\n                        style: {\n                          colors: [\"#000\"]\n                        },\n                        formatter: function (val, index) {\n                          return val.toFixed(2);\n                        }\n                      }\n                    },\n                    legend: {\n                      showForSingleSeries: true,\n                      markers: {\n                        fillColors: [\"#FFE000\"]\n                      }\n                    },\n                    stroke: {\n                      show: true,\n                      colors: [\"#FFE000\"]\n                    },\n                    fill: {\n                      colors: [\"#FFE000\"],\n                      opacity: 0.1\n                    },\n                    markers: {\n                      size: 4,\n                      colors: [\"#FFE000\"],\n                      hover: {\n                        size: 6\n                      }\n                    },\n                    plotOptions: {\n                      radar: {\n                        size: 140,\n                        polygons: {\n                          strokeColors: \"#9D9F9E\",\n                          connectorColors: \"#9D9F9E\"\n                        }\n                      }\n                    },\n                    title: {\n                      text: `${props.perspective} Diagramm`,\n                      align: \"center\",\n\n                      style: {\n                        fontSize: \"14px\"\n                      }\n                    }\n                  }}\n                  series={[\n                    {\n                      name: `Erfüllungsgrad, [%]`,\n                      data: fulfilment\n                    }\n                  ]}\n                  type=\"radar\"\n                  width=\"500\"\n                  height=\"400\"\n                  key={reset + \"b\"}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        <Divider />\n      </Form.Provider>\n    </>\n  );\n}\n","import { Form, Card } from \"antd\";\nimport React from \"react\";\nimport { TableMQPerspective } from \"./TableMQPerspective\";\nimport { StarFilled } from \"@ant-design/icons\";\n\nexport function TableMQ(props: {\n  title: string;\n  description: React.ReactNode;\n  backgroundColor: string;\n  columns: string[];\n  resultTitle: string;\n  resultInitials: string;\n  maturityWeight: number;\n  tableID: string;\n  onQualityLevelChange(value: number): void;\n}) {\n  const [aggregationPerspective1, setAggregationPerspective1] = React.useState<number>(0);\n  const [aggregationPerspective2, setAggregationPerspective2] = React.useState<number>(0);\n  const [aggregationPerspective3, setAggregationPerspective3] = React.useState<number>(0);\n  const [aggregationPerspective4, setAggregationPerspective4] = React.useState<number>(0);\n  const [mqMetric, setMqMetric] = React.useState<number>(0);\n\n  React.useEffect(() => {\n    setMqMetric(calculateMqMetric());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [aggregationPerspective1, aggregationPerspective2, aggregationPerspective3, aggregationPerspective4]);\n\n  React.useEffect(() => {\n    props.onQualityLevelChange(mqMetric * props.maturityWeight);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [mqMetric, props.maturityWeight]);\n\n  const calculateMqMetric = () => {\n    let mqMetric = 0;\n    mqMetric =\n      (aggregationPerspective1 + aggregationPerspective2 + aggregationPerspective3 + aggregationPerspective4) / 4;\n    return mqMetric;\n  };\n\n  const colorIcon = () => {\n    let mqMetric = 0;\n    let iconColor = \"#FFFFFF\";\n\n    mqMetric =\n      (aggregationPerspective1 + aggregationPerspective2 + aggregationPerspective3 + aggregationPerspective4) / 4;\n    if (mqMetric <= 0.5) {\n      return (iconColor = \"#FF0000\");\n    } else if (0.51 < mqMetric && mqMetric <= 0.66) {\n      return (iconColor = \"#ff8e03\");\n    } else if (0.67 < mqMetric && mqMetric <= 0.82) {\n      return (iconColor = \"#FFE000\");\n    } else if (0.83 < mqMetric && mqMetric <= 1.03) {\n      return (iconColor = \"#4EEE94\");\n    } else {\n      return iconColor;\n    }\n  };\n\n  return (\n    <div\n      style={{\n        textAlign: \"center\",\n        backgroundColor: props.backgroundColor,\n        padding: 40,\n        marginTop: 40\n      }}\n    >\n      <h1 style={{ textTransform: \"uppercase\" }}>{props.title}</h1>\n      <p>{props.description}</p>\n\n      <Form.Provider\n        onFormChange={(name, info) => {\n          props.onQualityLevelChange(mqMetric * props.maturityWeight);\n        }}\n      >\n        <div style={{ marginTop: 24 }}>\n          <TableMQPerspective\n            perspective={\"Maschinenperspektive\"}\n            tableID={props.tableID}\n            columns={props.columns}\n            kpiRowCount={2}\n            defaultValueName={[\"Rss,ugep\", \"OEE\", \"PI Name 1\", \"PI Name 2\", \"PI Name 3\"]}\n            defaultValueTarget={[20, 85]}\n            piRowCount={3}\n            defaultValuePIName={\"PI Name\"}\n            tableLegend={[\n              { shortcut: \"Rss,ugep\", name: \"Ratio ungeplante Stillstandzeit\" },\n              { shortcut: \"OEE\", name: \"Overall Equipment Effectiveness\" }\n            ]}\n            onAggregationChange={(value) => {\n              setAggregationPerspective1(value);\n            }}\n          />\n          <TableMQPerspective\n            perspective={\"Prozessperspektive\"}\n            tableID={props.tableID}\n            columns={props.columns}\n            kpiRowCount={3}\n            defaultValueName={[\"Riha,ugep\", \"EGiha,ugep\", \"EGiha,gep\", \"PI Name 1\", \"PI Name 2\", \"PI Name 3\"]}\n            defaultValueTarget={[10, 75, 90]}\n            piRowCount={3}\n            defaultValuePIName={\"PI Name\"}\n            tableLegend={[\n              { shortcut: \"Riha,ugep\", name: \"Ratio Instandhaltungsaufträge ungeplant\" },\n              { shortcut: \"EGiha,ugep\", name: \"Erfüllungsgrad ungeplanter Instandhaltungsaufträge\" },\n              { shortcut: \"EGiha,gep\", name: \"Erfüllungsgrad geplanter Instandhaltungsaufträge\" }\n            ]}\n            onAggregationChange={(value) => {\n              setAggregationPerspective2(value);\n            }}\n          />\n          <TableMQPerspective\n            perspective={\"Kostenperspektive\"}\n            tableID={props.tableID}\n            columns={props.columns}\n            kpiRowCount={2}\n            defaultValueName={[\"Rihk,ugep\", \"Rihk,personal\", \"PI Name 1\", \"PI Name 2\", \"PI Name 3\"]}\n            defaultValueTarget={[15, 10]}\n            piRowCount={3}\n            defaultValuePIName={\"PI Name\"}\n            tableLegend={[\n              { shortcut: \"Rihk,ugep\", name: \"Ratio Instandhaltungskosten ungeplant\" },\n              { shortcut: \"Rihk,personal\", name: \"Instandhaltungspersonalksoten-Ratio\" }\n            ]}\n            onAggregationChange={(value) => {\n              setAggregationPerspective3(value);\n            }}\n          />\n          <TableMQPerspective\n            perspective={\"Ressourcenperspektive\"}\n            tableID={props.tableID}\n            columns={props.columns}\n            kpiRowCount={1}\n            defaultValueName={[\"PS,ugep\", \"PI Name 1\", \"PI Name 2\", \"PI Name 3\"]}\n            defaultValueTarget={[15]}\n            piRowCount={3}\n            defaultValuePIName={\"PI Name\"}\n            tableLegend={[{ shortcut: \"PS,ugep\", name: \"geleistete Personenstunden der ungeplanten Instandhaltung\" }]}\n            onAggregationChange={(value) => {\n              setAggregationPerspective4(value);\n            }}\n          />\n        </div>\n      </Form.Provider>\n\n      <Card style={{ width: 300, margin: \"auto\" }} title={props.resultTitle}>\n        <span style={{ margin: 0 }}>\n          {props.resultInitials} = {mqMetric.toFixed(2)}\n        </span>\n        <span style={{ marginLeft: 8 }}>\n          <StarFilled style={{ color: colorIcon() }} />\n        </span>\n      </Card>\n    </div>\n  );\n}\n","import React from \"react\";\n\nconst Footer = () => {\n  return (\n    <>\n      <footer style={{ padding: 16, fontSize: \"0.5rem\" }}>\n        <div>{/* put some more Info about the Tool here? */}</div>\n      </footer>\n    </>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\n\nimport Introbox from \"./components/Introbox\";\nimport Result from \"./components/Result\";\n\nimport \"./App.css\";\nimport { Table } from \"./components/table/Table\";\nimport { TableMQ } from \"./components/table/TableMQ\";\nimport Footer from \"./components/Footer\";\n\nfunction App() {\n  const [weightedMetricDQ, setWeightedMetricDQ] = React.useState<number>(0);\n  const [weightedMetricIQ, setWeightedMetricIQ] = React.useState<number>(0);\n  const [weightedMetricKQ, setWeightedMetricKQ] = React.useState<number>(0);\n  const [weightedMetricMQ, setWeightedMetricMQ] = React.useState<number>(0);\n\n  return (\n    <>\n      <Introbox />\n      <Table\n        title=\"Datenqualitätsindikatoren\"\n        sourceTitle=\"Datenquellen\"\n        sourceInputPlaceholder=\"Datenquelle\"\n        description={\n          <>\n            Bitte geben Sie die Datenqualitätsindikatoren gemäß Ihrer Auswertung ein.\n            <br /> Es werden Zahlen mit zwei Nachkommastellen zwischen Null und Eins akzeptiert. <br /> Quellen können\n            selbst benannt werden.\n          </>\n        }\n        backgroundColor=\"#e6f5ff\"\n        columns={[\n          { name: \"Korrektheit\", weight: 0.18 },\n          { name: \"Validität\", weight: 0.09 },\n          { name: \"Provenienz\", weight: 0.08 },\n          { name: \"Vollständigkeit\", weight: 0.13 },\n          { name: \"Verfügbarkeit\", weight: 0.14 },\n          { name: \"Granularität\", weight: 0.09 },\n          { name: \"Einzigartigkeit\", weight: 0.02 },\n          { name: \"System-Konsistenz\", weight: 0.16 },\n          { name: \"Zugänglichkeit\", weight: 0.06 },\n          { name: \"Pünktlichkeit\", weight: 0.07 }\n        ]}\n        resultTitle=\"Ergebnis Datenqualität:\"\n        resultInitials=\"DQ\"\n        rowsCount={15}\n        tableID=\"dq\"\n        tableLegend={[]}\n        maturityWeight={0.36}\n        onQualityLevelChange={(value) => {\n          setWeightedMetricDQ(value);\n        }}\n      />\n\n      <Table\n        title=\"Informationsqualitätsindikatoren\"\n        sourceTitle=\"Informationsquellen\"\n        sourceInputPlaceholder=\"Infoquelle\"\n        description={\n          <>\n            Bitte geben Sie die Informationsqualitätsindikatoren gemäß Ihrer Auswertung ein.\n            <br /> Es werden Zahlen mit zwei Nachkommastellen zwischen Null und Eins akzeptiert. <br /> Quellen können\n            selbst benannt werden.\n          </>\n        }\n        backgroundColor=\"#dbf1ff\"\n        columns={[\n          { name: \"Korrektheit\", weight: 0.2 },\n          { name: \"Validität\", weight: 0.14 },\n          { name: \"Erklärbarkeit\", weight: 0.09 },\n          { name: \"Aktualität\", weight: 0.14 },\n          { name: \"Prägnanz\", weight: 0.02 },\n          { name: \"Vollständigkeit\", weight: 0.15 },\n          { name: \"Pünktlichkeit\", weight: 0.12 },\n          { name: \"Zweckmäßigkeit\", weight: 0.07 },\n          { name: \"Informationsfluss\", weight: 0.06 }\n        ]}\n        resultTitle=\"Ergebnis Informationsqualität:\"\n        resultInitials=\"IQ\"\n        rowsCount={15}\n        tableID=\"iq\"\n        tableLegend={[]}\n        maturityWeight={0.23}\n        onQualityLevelChange={(value) => {\n          setWeightedMetricIQ(value);\n        }}\n      />\n\n      <Table\n        title=\"Wissensqualitätsindikatoren\"\n        sourceTitle=\"Wissensquellen\"\n        sourceInputPlaceholder=\"Wissensquelle\"\n        description={\n          <>\n            Bitte geben Sie die Wissensqualitätsindikatoren gemäß Ihrer Auswertung ein.\n            <br /> Es werden Zahlen mit zwei Nachkommastellen zwischen Null und Eins akzeptiert. <br /> Quellen können\n            selbst benannt werden.\n          </>\n        }\n        backgroundColor=\"#e6f5ff\"\n        columns={[\n          { name: \"BnKQ,k\", weight: 0.18 },\n          { name: \"EnKQ,k\", weight: 0.31 },\n          { name: \"LeKQ,k\", weight: 0.31 },\n          { name: \"ZwKQ\", weight: 0.21 }\n        ]}\n        resultTitle=\"Ergebnis Wissensqualität:\"\n        resultInitials=\"KQ\"\n        rowsCount={15}\n        tableID=\"kq\"\n        tableLegend={[\n          { shortcut: \"BnKQ,k\", name: \"Bildungsniveau eines Mitarbeiters\" },\n          { shortcut: \"EnKQ,k\", name: \"Erfahrungsniveau eines Mitarbeiters\" },\n          { shortcut: \"LeKQ,k\", name: \"Leistungsniveau eines Mitarbeiters\" },\n          { shortcut: \"ZwKQ\", name: \"Zweckmäßigkeit eines IT-Systems zur Wissensbereitstellung\" }\n        ]}\n        maturityWeight={0.28}\n        onQualityLevelChange={(value) => {\n          setWeightedMetricKQ(value);\n        }}\n      />\n\n      <TableMQ\n        title=\"Instandhaltungsqualitätsindikatoren\"\n        description={\n          <>\n            Bitte geben Sie die Instandhaltungsqualitätsindikatoren gemäß Ihrer Auswertung ein.\n            <br /> Für Prozentangaben werden ganze Zahlen zwischen Null und 100 akzeptiert.\n            <br /> PI Kennzahlen können selbst benannt werden.\n          </>\n        }\n        backgroundColor=\"#dbf1ff\"\n        columns={[\"An/Aus\", \"Stufe\", \"Kennzahl\", \"Ist, [%, €]\", \"Soll, [%, €]\", \"Erfüllungsgrad\"]}\n        resultTitle=\"Ergebnis Instandhaltungsqualität:\"\n        resultInitials=\"MQ\"\n        maturityWeight={0.13}\n        tableID=\"mq\"\n        onQualityLevelChange={(value) => {\n          setWeightedMetricMQ(value);\n        }}\n      />\n\n      <Result maturityLevel={weightedMetricDQ + weightedMetricIQ + weightedMetricKQ + weightedMetricMQ} />\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"antd/dist/antd.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}