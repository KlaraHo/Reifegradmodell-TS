{"version":3,"sources":["components/img/TU-Wien-Logo.png","components/Introbox.tsx","components/Result.tsx","components/table/TableRow.tsx","components/table/TableRowTargetvalue.tsx","components/table/TableRowAggregation.tsx","components/table/Table.tsx","components/table/TableMQRow.tsx","components/table/TableMQPerspective.tsx","components/table/TableMQ.tsx","components/Footer.tsx","App.tsx","index.tsx"],"names":["Introbox","style","textAlign","className","float","width","height","marginTop","src","Logo","alt","fontSize","textTransform","Result","props","Fragment","backgroundColor","padding","textDecoration","title","margin","maturityLevel","toFixed","fontStyle","fontWeight","maturityStage","calculateMaturityStage","marginLeft","StarFilled","color","iconColor","colorIcon","overflow","textOverflow","TableRow","Form","useForm","form","React","useState","active","setActive","sum","setSum","useEffect","resetFields","reset","name","tableID","row","toString","display","gridTemplateColumns","columns","length","justifyItems","columnGap","rowGap","onValuesChange","_","values","console","error","total","totalWeights","Object","entries","value","Number","isFinite","handleFieldValuesChange","initialValues","description","sourceInputPlaceholder","Item","valuePropName","checked","onChange","event","target","onActiveChange","map","column","index","rules","required","message","disabled","size","min","max","step","precision","TableRowTargetvalue","rowTitle","type","TableRowAggregation","Table","initialSums","i","push","initialSumsRows","rowsCount","initialRowDescriptions","sums","setSums","rowSums","setRowSums","rowDescriptions","setRowDescription","setReset","targetValues","setTargetValues","setInitialValues","calculateMetric","totalMetric","forEach","weightedSum","weight","categoriesMetricChart","a","forms","Array","from","x","background","onClick","justifyContent","marginRight","icon","DownloadOutlined","UploadOutlined","sourceTitle","Provider","onFormChange","info","targetValuesForm","formTargetValue","getFieldValue","undefined","totalColumn","totalColumnWeights","formColumnValue","newRowSums","newRowDescriptions","formName","rowColumn","rowColumnWeights","onQualityLevelChange","maturityWeight","WarningOutlined","okText","cancelText","onConfirm","success","danger","tableLegend","term","shortcut","options","chart","id","xaxis","categories","labels","show","colors","yaxis","forceNiceScale","maxWidth","formatter","val","legend","markers","fillColors","stroke","fill","opacity","hover","plotOptions","radar","polygons","strokeColors","connectorColors","text","resultInitials","series","data","resultTitle","showForSingleSeries","calculateFulfilment","actualValue","targetValue","TableMQRow","fulfilment","setFulfilment","perspective","gridRow","gridColumn","defaultValueName","defaultValueTarget","isKpiRow","TableMQPerspective","initialMqRowDescriptions","kpiRowCount","piRowCount","initialFulfilment","aggregationSum","setAggregationSum","mqRowDescriptions","setMqRowDescriptions","totalKpi","totalWeightsKpi","sumKpi","totalPi","totalWeightsPi","sumPi","newMqRowDescriptions","newFulfilment","qi","newSum","onAggregationChange","marginBottom","align","TableMQ","aggregationPerspective1","setAggregationPerspective1","aggregationPerspective2","setAggregationPerspective2","aggregationPerspective3","aggregationPerspective4","mqMetric","setMqMetric","calculateMqMetric","log","defaultValuePIName","Footer","App","weightedMetricDQ","setWeightedMetricDQ","weightedMetricIQ","setWeightedMetricIQ","weightedMetricKQ","setWeightedMetricKQ","weightedMetricMQ","setWeightedMetricMQ","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e8ec891d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/TU-Wien-Logo.8d33c646.png\";","import React from \"react\";\n\nimport Logo from \"./img/TU-Wien-Logo.png\";\n\nimport \"../App.css\";\n\nconst Introbox = () => {\n  return (\n    <>\n      <section style={{ textAlign: \"center\" }}>\n        <div className=\"container\">\n          <div className=\"row\">\n            <img\n              style={{ float: \"left\", width: 200, height: \"auto\", marginTop: \"1rem\" }}\n              src={Logo}\n              alt=\"TU Wien Logo\"\n            />\n          </div>\n\n          <div className=\"row\">\n            <h1 style={{ fontSize: \"4rem\", textTransform: \"uppercase\" }}>Reifegradmodell</h1>\n            <h2 style={{ marginTop: \"1rem\" }}>der Instandhaltung</h2>\n          </div>\n          <div className=\"row\">\n            <p style={{ marginTop: \"3rem\" }}>\n              Mit diesem Tool ist es möglich den unternehmenseigenen Reifegrad der Instandhaltung zu berechnen.\n              <br />\n              Es werden vier Faktoren: Datenqualität D<sub>Q</sub>, Informationsqualität I<sub>Q</sub>, Wissensqualität\n              K<sub>Q</sub> und Instandhaltungsqualität K<sub>Q</sub> zur Berechnung herangezogen. <br />\n              Visuell unterstützt werden die Ergebnisse mit interaktiven Diagrammen.\n            </p>\n          </div>\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default Introbox;\n","import React from \"react\";\nimport { Card } from \"antd\";\nimport { StarFilled } from \"@ant-design/icons\";\n\nconst Result = (props: { maturityLevel: number }) => {\n  const calculateMaturityStage = () => {\n    let maturityStage = \"nicht berechnet\";\n    if (props.maturityLevel <= 0.15) {\n      return (maturityStage = \"I\");\n    } else if (0.15 < props.maturityLevel && props.maturityLevel <= 0.55) {\n      return (maturityStage = \"II\");\n    } else if (0.56 < props.maturityLevel && props.maturityLevel <= 0.86) {\n      return (maturityStage = \"III\");\n    } else if (0.87 < props.maturityLevel && props.maturityLevel <= 1) {\n      return (maturityStage = \"IV\");\n    } else {\n      return maturityStage;\n    }\n  };\n\n  const colorIcon = () => {\n    let iconColor = \"#FFFFFF\";\n    if (props.maturityLevel <= 0.15) {\n      return (iconColor = \"#FF0000\");\n    } else if (0.15 < props.maturityLevel && props.maturityLevel <= 0.55) {\n      return (iconColor = \"#ff8e03\");\n    } else if (0.56 < props.maturityLevel && props.maturityLevel <= 0.86) {\n      return (iconColor = \"#FFE000\");\n    } else if (0.87 < props.maturityLevel && props.maturityLevel <= 1) {\n      return (iconColor = \"#4EEE94\");\n    } else {\n      return iconColor;\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <section style={{ marginTop: 40, textAlign: \"center\", backgroundColor: \"#e6f5ff\", padding: 40 }}>\n        <div className=\"row\">\n          <div>\n            <h1 style={{ fontSize: \"2em\", textTransform: \"uppercase\", textDecoration: \"underline\" }}>Ergebnis</h1>\n          </div>\n          <div>\n            <p>Hier wird der berechnete Reifegrad gemäß Ihrer Angaben aufgeführt.</p>\n          </div>\n          <div style={{ marginTop: 40 }}>\n            <Card title=\"Ihr momentaner Reifegrad\" style={{ width: 300, margin: \"auto\" }}>\n              <p>{(props.maturityLevel * 100).toFixed(2)} %</p>\n              <span style={{ fontStyle: \"italic\", fontWeight: \"bold\", fontSize: 16 }}>\n                Reifegrad {calculateMaturityStage()}\n              </span>\n              <span style={{ marginLeft: 8 }}>\n                <StarFilled style={{ color: colorIcon() }} />\n              </span>\n            </Card>\n            <div style={{ fontSize: 10, overflow: \"hidden\", textOverflow: \"ellipsis\", width: \" 100%\", marginTop: 16 }}>\n              RG I ... 0-15%, RG II ... 16-55%, RG III ... 56-86%, RG IV ... 87-100%\n            </div>\n          </div>\n        </div>\n      </section>\n    </React.Fragment>\n  );\n};\n\nexport default Result;\n","import { Checkbox, Form, Input, InputNumber } from \"antd\";\nimport React from \"react\";\nimport { ITableColumn } from \"./Table\";\n\nexport function TableRow(props: {\n  columns: ITableColumn[];\n  row: number;\n  tableID: string;\n  sourceInputPlaceholder: string;\n  reset: number;\n  initialValues?: { description: string; values: number[] };\n  onActiveChange?(active: boolean): void;\n}) {\n  const [form] = Form.useForm();\n  const [active, setActive] = React.useState<boolean>(true);\n  const [sum, setSum] = React.useState<number>(0);\n\n  React.useEffect(() => {\n    if (form) {\n      form.resetFields();\n    }\n    setSum(0);\n    setActive(true);\n  }, [form, props.reset]);\n\n  function handleFieldValuesChange(values: any) {\n    console.error(\"onValuesChange\");\n    let total = 0;\n    let totalWeights = 0;\n\n    if (values.active) {\n      // eslint-disable-next-line\n      for (const [_key, value] of Object.entries(values)) {\n        if (Number.isFinite(value)) {\n          let qi = value as number;\n\n          if (qi <= 0.5) {\n            total += qi * 1.3;\n            totalWeights += 1.3;\n          } else {\n            total += qi;\n            totalWeights += 1;\n          }\n        }\n      }\n\n      if (totalWeights) {\n        setSum(total / totalWeights);\n      }\n    }\n  }\n\n  // React.useEffect(() => {\n  //   if (form) {\n  //     form.resetFields();\n  //     const defaultValues: any = {};\n  //     props.columns.forEach((column, index) => {\n  //       defaultValues[column.name] = props.initialValues?.values[index];\n  //     });\n\n  //     form.setFieldsValue(defaultValues);\n  //     form.validateFields();\n  //     // handleFieldValuesChange(form.getFieldsValue());\n  //     form.submit();\n  //   }\n  //   setActive(true);\n  // }, [props.initialValues, form, props.columns]);\n\n  return (\n    <Form\n      form={form}\n      name={props.tableID + \"_\" + props.row.toString()}\n      style={{\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${2 + props.columns.length + 1}, 1fr)`,\n        justifyItems: \"center\",\n        columnGap: 16,\n        rowGap: 16\n      }}\n      onValuesChange={(_, values) => {\n        handleFieldValuesChange(values);\n      }}\n      initialValues={{\n        active: true,\n        description: `${props.sourceInputPlaceholder} ${props.row + 1}`\n      }}\n    >\n      <Form.Item name=\"description\">\n        <Input style={{ marginTop: 6 }} />\n      </Form.Item>\n\n      <Form.Item name=\"active\" valuePropName=\"checked\">\n        <Checkbox\n          style={{ marginTop: 6 }}\n          checked={active}\n          onChange={(event) => {\n            setActive(event.target.checked);\n            if (props.onActiveChange) {\n              props.onActiveChange(event.target.checked);\n            }\n          }}\n        />\n      </Form.Item>\n\n      {props.columns.map((column, index) => {\n        return (\n          <Form.Item\n            key={index}\n            name={column.name}\n            rules={[{ required: false, message: \"Zahl zwischen 0 & 1 mit 2 Dezimalstellen\" }]}\n          >\n            <InputNumber\n              disabled={!active}\n              key={props.tableID + \"_\" + index}\n              size=\"small\"\n              min=\"0\"\n              max=\"1\"\n              step=\"0.01\"\n              precision={2}\n            />\n          </Form.Item>\n        );\n      })}\n      <div key={props.tableID + \"_\"} style={{ height: \"24px\", marginTop: 4, color: active ? \"#000\" : \"#ccc\" }}>\n        {sum.toFixed(2)}\n      </div>\n    </Form>\n  );\n}\n","import { Form, InputNumber } from \"antd\";\nimport React from \"react\";\nimport { ITableColumn } from \"./Table\";\n\nexport function TableRowTargetvalue(props: {\n  columns: ITableColumn[];\n  row: number;\n  rowTitle: string;\n  tableID: string;\n  reset: number;\n}) {\n  //reset does not work\n  const [form] = Form.useForm();\n\n  React.useEffect(() => {\n    if (form) {\n      form.resetFields();\n    }\n  }, [form, props.reset]);\n\n  return (\n    <Form\n      form={form}\n      style={{\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${2 + props.columns.length + 1}, 1fr)`,\n        justifyItems: \"center\",\n        columnGap: 16\n      }}\n      name=\"targetValues\"\n    >\n      <span\n        style={{\n          fontWeight: \"bold\",\n          textDecoration: \"underline\",\n          marginTop: 6,\n          overflow: \"hidden\",\n          textOverflow: \"ellipsis\",\n          width: \" 100%\"\n        }}\n      >\n        {props.rowTitle}\n      </span>\n      <div />\n      {props.columns.map((column, index) => {\n        return (\n          <Form.Item\n            key={index}\n            name={props.tableID + \"_targetValue_\" + column.name}\n            rules={[{ required: false, type: \"regexp\", message: \"TODO\" }]}\n          >\n            <InputNumber key={props.tableID + \"_\" + index} size=\"small\" min=\"0\" max=\"1\" step=\"0.01\" precision={2} />\n          </Form.Item>\n        );\n      })}\n    </Form>\n  );\n}\n","import React from \"react\";\n\nexport function TableRowAggregation(props: { values: string[]; tableID: string }) {\n  return (\n    <div\n      style={{\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${2 + props.values.length + 1}, 1fr)`,\n        justifyItems: \"center\",\n        columnGap: 16,\n        rowGap: 16\n      }}\n    >\n      <span\n        style={{\n          fontWeight: \"bold\",\n          textDecoration: \"underline\",\n          marginTop: 6,\n          overflow: \"hidden\",\n          textOverflow: \"ellipsis\",\n          width: \" 100%\"\n        }}\n      >\n        Aggregation\n      </span>\n      <div />\n      {props.values.map((value, index) => {\n        return (\n          <div style={{ height: \"24px\" }} key={props.tableID + \"_\" + index}>\n            {value}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","import { Button, Form, Divider, Card, Popconfirm, message } from \"antd\";\nimport React from \"react\";\nimport { TableRow } from \"./TableRow\";\nimport { TableRowTargetvalue } from \"./TableRowTargetvalue\";\nimport { TableRowAggregation } from \"./TableRowAggregation\";\nimport Chart from \"react-apexcharts\";\nimport { WarningOutlined, StarFilled, DownloadOutlined, UploadOutlined } from \"@ant-design/icons\";\n\nexport interface ITableColumn {\n  name: string;\n  weight: number;\n}\n\nexport interface tableLegend {\n  shortcut: string;\n  name: string;\n}\n\nexport function Table(props: {\n  title: string;\n  sourceTitle: string;\n  sourceInputPlaceholder: string;\n  description: React.ReactNode;\n  backgroundColor: string;\n  columns: ITableColumn[];\n  resultTitle: string;\n  resultInitials: string;\n  rowsCount: number;\n  tableID: string;\n  tableLegend: tableLegend[];\n  maturityWeight: number;\n  onQualityLevelChange(value: number): void;\n}) {\n  const initialSums: number[] = [];\n  for (let i = 0; i < props.columns.length; i++) {\n    initialSums.push(0);\n  }\n\n  const initialSumsRows: number[] = [];\n  for (let i = 0; i < props.rowsCount; i++) {\n    initialSumsRows.push(0);\n  }\n\n  const initialRowDescriptions: string[] = [];\n  for (let i = 0; i < props.rowsCount; i++) {\n    initialRowDescriptions.push(`${props.sourceInputPlaceholder} ${i + 1}`);\n  }\n\n  const [sums, setSums] = React.useState<number[]>(initialSums);\n  const [rowSums, setRowSums] = React.useState<number[]>(initialSumsRows);\n  const [rowDescriptions, setRowDescription] = React.useState<string[]>(initialRowDescriptions);\n  const [reset, setReset] = React.useState<number>(0);\n  const [targetValues, setTargetValues] = React.useState<number[]>([]);\n  const [initialValues, setInitialValues] = React.useState<{ description: string; values: number[] }[]>([]);\n\n  // Calculate Metrics: DQ, IQ, KQ\n  const calculateMetric = () => {\n    let totalMetric = 0;\n\n    sums.forEach((sum, index) => {\n      const weightedSum = props.columns[index].weight * sum;\n\n      totalMetric += weightedSum;\n    });\n\n    return totalMetric;\n  };\n\n  const colorIcon = () => {\n    let totalMetric = 0;\n    let iconColor = \"#FFFFFF\";\n\n    sums.forEach((sum, index) => {\n      const weightedSum = props.columns[index].weight * sum;\n\n      totalMetric += weightedSum;\n    });\n\n    if (totalMetric <= 0.5) {\n      return (iconColor = \"#FF0000\");\n    } else if (0.51 < totalMetric && totalMetric <= 0.66) {\n      return (iconColor = \"#ff8e03\");\n    } else if (0.67 < totalMetric && totalMetric <= 0.82) {\n      return (iconColor = \"#FFE000\");\n    } else if (0.83 < totalMetric && totalMetric <= 1.03) {\n      return (iconColor = \"#4EEE94\");\n    } else {\n      return iconColor;\n    }\n  };\n\n  // Metric Chart Categories\n  let categoriesMetricChart = props.columns.map((a) => a.name);\n\n  const forms = Array.from({ length: props.rowsCount }, (x, i) => i).map((row) => {\n    return (\n      <TableRow\n        key={row}\n        columns={props.columns}\n        row={row}\n        sourceInputPlaceholder={props.sourceInputPlaceholder}\n        tableID={props.tableID}\n        reset={reset}\n        initialValues={initialValues[row]}\n      />\n    );\n  });\n\n  return (\n    <div style={{ textAlign: \"center\", background: props.backgroundColor, padding: 40, marginTop: 40 }}>\n      <h1 style={{ textTransform: \"uppercase\" }}>{props.title}</h1>\n      <p\n        onClick={() => {\n          setInitialValues([{ description: \"x\", values: [1, 1, 1] }]);\n        }}\n      >\n        {props.description}\n      </p>\n      <div style={{ justifyContent: \"flex-end\", display: \"flex\", marginTop: 16 }}>\n        <span style={{ textAlign: \"center\", marginRight: 20, marginTop: 10 }}>.csv</span>\n        <Button type=\"primary\" icon={<DownloadOutlined />} size={\"large\"} style={{ marginRight: 16 }} />\n        <Button type=\"primary\" icon={<UploadOutlined />} size={\"large\"} />\n      </div>\n      <div\n        style={{\n          marginTop: 40,\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${2 + props.columns.length + 1}, 1fr)`,\n          justifyItems: \"center\",\n          columnGap: 16,\n          rowGap: 4\n        }}\n      >\n        <span\n          style={{\n            fontWeight: \"bold\",\n            textDecoration: \"underline\",\n            overflow: \"hidden\",\n            textOverflow: \"ellipsis\",\n            width: \" 100%\"\n          }}\n        >\n          {props.sourceTitle}\n        </span>\n        <span\n          style={{\n            fontWeight: \"bold\",\n            textDecoration: \"underline\",\n            overflow: \"hidden\",\n            textOverflow: \"ellipsis\",\n            width: \" 100%\"\n          }}\n        >\n          An/Aus\n        </span>\n        {props.columns.map((column, index) => {\n          return (\n            <span\n              style={{ fontWeight: \"bold\", overflow: \"hidden\", textOverflow: \"ellipsis\", width: \" 100%\" }}\n              key={index}\n            >\n              {column.name}\n            </span>\n          );\n        })}\n\n        <span\n          style={{\n            fontWeight: \"bold\",\n            textDecoration: \"underline\",\n            overflow: \"hidden\",\n            textOverflow: \"ellipsis\",\n            width: \" 100%\"\n          }}\n        >\n          Aggregation\n        </span>\n      </div>\n\n      <Form.Provider\n        onFormChange={(name, info) => {\n          if (name === \"targetValues\") {\n            const targetValuesForm = info.forms.targetValues;\n            const targetValues: number[] = [];\n\n            props.columns.forEach((column, index) => {\n              const formTargetValue = targetValuesForm.getFieldValue(props.tableID + \"_targetValue_\" + column.name);\n              if (formTargetValue !== undefined) {\n                targetValues[index] = formTargetValue;\n              } else {\n                targetValues[index] = 0;\n              }\n            });\n\n            setTargetValues(targetValues);\n          } else {\n            const sums: number[] = [];\n\n            for (let i = 0; i < props.columns.length; i++) {\n              sums[i] = 0;\n            }\n\n            // Calculate Aggregation Columns\n            props.columns.forEach((column, index) => {\n              let totalColumn = 0;\n              let totalColumnWeights = 0;\n\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              for (const [_formName, form] of Object.entries(info.forms)) {\n                if (form.getFieldValue(\"active\")) {\n                  const formColumnValue = form.getFieldValue(column.name);\n\n                  if (formColumnValue !== undefined) {\n                    if (formColumnValue <= 0.5) {\n                      totalColumn += formColumnValue * 1.3;\n                      totalColumnWeights += 1.3;\n                    } else {\n                      totalColumn += formColumnValue;\n                      totalColumnWeights += 1;\n                    }\n                    sums[index] = totalColumn / totalColumnWeights;\n                  }\n                }\n              }\n            });\n            setSums(sums);\n\n            // Calculate Row Aggregation for Chart\n            const newRowSums = [];\n            const newRowDescriptions = [];\n\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            for (const [formName, form] of Object.entries(info.forms)) {\n              if (formName !== \"targetValues\") {\n                let rowColumn = 0;\n                let rowColumnWeights = 0;\n\n                if (form.getFieldValue(\"active\")) {\n                  props.columns.forEach((column, index) => {\n                    const formColumnValue = form.getFieldValue(column.name);\n\n                    if (Number.isFinite(formColumnValue)) {\n                      if (formColumnValue <= 0.5) {\n                        rowColumn += formColumnValue * 1.3;\n                        rowColumnWeights += 1.3;\n                      } else {\n                        rowColumn += formColumnValue;\n                        rowColumnWeights += 1;\n                      }\n                    }\n                  });\n\n                  newRowDescriptions.push(form.getFieldValue(\"description\"));\n\n                  if (rowColumnWeights) {\n                    newRowSums.push(rowColumn / rowColumnWeights);\n                  } else {\n                    newRowSums.push(0);\n                  }\n                }\n              }\n            }\n\n            setRowSums(newRowSums);\n            setRowDescription(newRowDescriptions);\n          }\n\n          props.onQualityLevelChange(calculateMetric() * props.maturityWeight);\n        }}\n      >\n        {forms}\n\n        <Divider />\n\n        <TableRowAggregation values={sums.map((i) => i.toFixed(2))} tableID={props.tableID} />\n        <TableRowTargetvalue\n          columns={props.columns}\n          row={props.rowsCount + 1}\n          rowTitle={\"Sollwert\"}\n          tableID={props.tableID}\n          reset={reset}\n        />\n\n        <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n          <Popconfirm\n            icon={<WarningOutlined style={{ color: \"red\" }} />}\n            title=\"Wollen Sie die Werte dieses Abschnitts wirklich zurücksetzen?\"\n            okText=\"OK\"\n            cancelText=\"Abbrechen\"\n            onConfirm={() => {\n              for (let i = 0; i < props.columns.length; i++) {\n                sums[i] = 0;\n              }\n              setRowSums(initialSumsRows);\n              setTargetValues([]);\n              setRowDescription(initialRowDescriptions);\n              props.onQualityLevelChange(0);\n              setReset(reset + 1);\n              message.success(\"Daten wurden erfolgreich zurückgesetzt!\");\n            }}\n          >\n            <Button type=\"text\" danger style={{ marginRight: 16, marginTop: 24 }}>\n              Zurücksetzen\n            </Button>\n          </Popconfirm>\n        </div>\n\n        <div style={{ textAlign: \"center\", marginTop: 4 }}>\n          {props.tableLegend.map((term, index) => {\n            return (\n              <span style={{ fontSize: 10, overflow: \"hidden\", textOverflow: \"ellipsis\", width: \" 100%\" }} key={index}>\n                {term.shortcut + \"...\" + term.name + \", \"}\n              </span>\n            );\n          })}\n        </div>\n\n        <Divider />\n\n        <div style={{ display: \"flex\", justifyContent: \"space-between\", marginTop: 40 }}>\n          <Chart\n            // Metric Chart\n            options={{\n              chart: {\n                id: \"metric-chart\"\n              },\n              xaxis: {\n                categories: categoriesMetricChart,\n                labels: {\n                  show: true,\n                  style: {\n                    colors: [\"#000\", \"#000\", \"#000\", \"#000\", \"#000\", \"#000\", \"#000\", \"#000\", \"#000\", \"#000\"],\n                    fontSize: \"12px\"\n                  }\n                }\n              },\n              yaxis: {\n                forceNiceScale: true,\n                min: 0,\n                max: 1,\n                labels: {\n                  maxWidth: 1,\n                  style: {\n                    colors: [\"#000\"]\n                  },\n                  formatter: function (val, index) {\n                    return val.toFixed(2);\n                  }\n                }\n              },\n              legend: {\n                markers: {\n                  fillColors: [\"#ff8e03\", \"#0a9bf0\"]\n                }\n              },\n              stroke: {\n                show: true,\n                colors: [\"#ff8e03\", \"#0a9bf0\"]\n              },\n              fill: {\n                colors: [\"#ff8e03\", \"#0a9bf0\"],\n                opacity: 0.1\n              },\n              markers: {\n                size: 4,\n                colors: [\"#ff8e03\", \"#0a9bf0\"],\n                hover: {\n                  size: 6\n                }\n              },\n              plotOptions: {\n                radar: {\n                  size: 140,\n                  polygons: {\n                    strokeColors: \"#9D9F9E\",\n                    connectorColors: \"#9D9F9E\"\n                  }\n                }\n              },\n              title: {\n                text: `${props.resultInitials} Indikatoren Diagramm`\n              }\n            }}\n            series={[\n              {\n                name: `${props.resultInitials} Indikatoren`,\n                data: sums\n              },\n              { name: `${props.resultInitials} Sollwerte`, data: targetValues }\n            ]}\n            type=\"radar\"\n            width=\"700\"\n            key={reset + \"a\"}\n          />\n\n          <Card style={{ width: 300, margin: \"auto\" }} title={props.resultTitle}>\n            <span style={{ margin: 0 }}>\n              {props.resultInitials} = {calculateMetric().toFixed(2)}\n            </span>\n            <span style={{ marginLeft: 8 }}>\n              <StarFilled style={{ color: colorIcon() }} />\n            </span>\n          </Card>\n\n          <Chart\n            // Source Chart\n            options={{\n              chart: {\n                id: \"source-chart\"\n              },\n              xaxis: {\n                categories: rowDescriptions,\n                labels: {\n                  show: true,\n                  style: {\n                    colors: [\n                      \"#000\",\n                      \"#000\",\n                      \"#000\",\n                      \"#000\",\n                      \"#000\",\n                      \"#000\",\n                      \"#000\",\n                      \"#000\",\n                      \"#000\",\n                      \"#000\",\n                      \"#000\",\n                      \"#000\",\n                      \"#000\",\n                      \"#000\",\n                      \"#000\"\n                    ],\n                    fontSize: \"12px\"\n                  }\n                }\n              },\n              yaxis: {\n                forceNiceScale: true,\n                min: 0,\n                max: 1,\n                labels: {\n                  maxWidth: 1,\n                  style: {\n                    colors: [\"#000\"]\n                  },\n                  formatter: function (val, index) {\n                    return val.toFixed(2);\n                  }\n                }\n              },\n              legend: {\n                showForSingleSeries: true,\n                markers: {\n                  fillColors: [\"#4EEE94\"]\n                }\n              },\n              stroke: {\n                show: true,\n                colors: [\"#4EEE94\"]\n              },\n              fill: {\n                colors: [\"#4EEE94\"],\n                opacity: 0.1\n              },\n              markers: {\n                size: 4,\n                colors: [\"#4EEE94\"],\n                hover: {\n                  size: 6\n                }\n              },\n              plotOptions: {\n                radar: {\n                  size: 140,\n                  polygons: {\n                    strokeColors: \"#9D9F9E\",\n                    connectorColors: \"#9D9F9E\"\n                  }\n                }\n              },\n              title: {\n                text: `${props.sourceTitle} Diagramm`\n              }\n            }}\n            series={[\n              {\n                name: `${props.resultInitials} Quellen`,\n                data: rowSums\n              }\n            ]}\n            type=\"radar\"\n            width=\"700\"\n            key={reset + \"b\"}\n          />\n        </div>\n      </Form.Provider>\n    </div>\n  );\n}\n","import { Form, Checkbox, Input, InputNumber } from \"antd\";\nimport React from \"react\";\n\nexport function calculateFulfilment(actualValue: number, targetValue: number): number {\n  if (targetValue === 0) {\n    return 0;\n  } else if (actualValue <= targetValue) {\n    return (actualValue / targetValue) * 100;\n  } else if (targetValue < actualValue) {\n    return (targetValue / actualValue) * 100;\n  } else {\n    console.error(\"Something went wrong!\");\n    return 0;\n  }\n}\n\nexport function TableMQRow(props: {\n  row: number;\n  isKpiRow: boolean;\n  step: string;\n  defaultValueName?: string;\n  defaultValueTarget?: number;\n  tableID: string;\n  perspective: string;\n  reset: number;\n  onActiveChange?(active: boolean): void;\n}) {\n  const [form] = Form.useForm();\n  const [active, setActive] = React.useState<boolean>(true);\n  const [fulfilment, setFulfilment] = React.useState<number>(0);\n\n  React.useEffect(() => {\n    if (form) {\n      form.resetFields();\n    }\n    setFulfilment(0);\n    setActive(true);\n  }, [form, props.reset]);\n\n  // let categoriesPerspectiveChart = [];\n\n  return (\n    <Form\n      form={form}\n      name={props.tableID + \"_\" + props.perspective + \"_\" + props.row}\n      style={{ gridRow: `${props.row}`, gridColumn: 2 }}\n      onValuesChange={(_, values) => {\n        let actualValue: number = form.getFieldValue(\"actualValue\") || 0;\n        let targetValue: number = form.getFieldValue(\"targetValue\") || 0;\n\n        // console.log(\"rowValues\", actualValue, targetValue);\n\n        setFulfilment(calculateFulfilment(actualValue, targetValue));\n      }}\n      initialValues={{\n        active: true,\n        step: props.step,\n        description: props.defaultValueName,\n        actualValue: \"\",\n        targetValue: props.defaultValueTarget || \"\"\n      }}\n    >\n      <div\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: \"repeat(6,  1fr)\",\n          justifyContent: \"center\",\n          columnGap: 16\n        }}\n      >\n        <Form.Item name=\"active\" valuePropName=\"checked\">\n          <Checkbox\n            style={{ marginTop: 4 }}\n            checked={active}\n            onChange={(event) => {\n              setActive(event.target.checked);\n              if (props.onActiveChange) {\n                props.onActiveChange(event.target.checked);\n              }\n            }}\n          />\n        </Form.Item>\n\n        <Form.Item name=\"step\">\n          <div>\n            <Input disabled style={{ display: \"none\" }} />\n            <div>{props.step}</div>\n          </div>\n        </Form.Item>\n\n        <Form.Item name=\"description\">\n          <Input disabled={active ? props.isKpiRow : !active} />\n        </Form.Item>\n        <Form.Item name=\"actualValue\">\n          <InputNumber\n            disabled={!active}\n            key={props.tableID + \"_\" + props.perspective + \"_\" + props.row + \"_actualValue\"}\n            size=\"small\"\n            min=\"0\"\n            max=\"100\"\n            step=\"1\"\n          />\n        </Form.Item>\n        <Form.Item name=\"targetValue\">\n          <InputNumber\n            disabled={active ? props.isKpiRow : !active}\n            key={props.tableID + \"_\" + props.perspective + \"_\" + props.row + \"_targetValue\"}\n          />\n        </Form.Item>\n        <Form.Item name=\"fulfilment\">\n          <div key={props.tableID + \"_fulfilment_\" + props.row} style={{ color: active ? \"#000\" : \"#ccc\" }}>\n            {fulfilment.toFixed(0)} %\n          </div>\n        </Form.Item>\n      </div>\n    </Form>\n  );\n}\n","import { Divider, Form, Button, Popconfirm, message } from \"antd\";\nimport React from \"react\";\nimport Chart from \"react-apexcharts\";\nimport { calculateFulfilment, TableMQRow } from \"./TableMQRow\";\nimport { WarningOutlined } from \"@ant-design/icons\";\n\nexport interface tableLegend {\n  shortcut: string;\n  name: string;\n}\n\nexport function TableMQPerspective(props: {\n  perspective: string;\n  tableID: string;\n  kpiRowCount: number;\n  defaultValueName: string[];\n  defaultValueTarget: number[];\n  piRowCount: number;\n  defaultValuePIName: string;\n  tableLegend: tableLegend[];\n  columns: string[];\n  onAggregationChange(value: number): void;\n}) {\n  const initialMqRowDescriptions: string[] = [];\n  for (let i = 0; i < props.kpiRowCount + props.piRowCount; i++) {\n    initialMqRowDescriptions.push(props.defaultValueName[i]);\n  }\n\n  const initialFulfilment: number[] = [];\n  for (let i = 0; i < props.kpiRowCount + props.piRowCount; i++) {\n    initialFulfilment.push(0);\n  }\n\n  const [aggregationSum, setAggregationSum] = React.useState<number>(0);\n  const [mqRowDescriptions, setMqRowDescriptions] = React.useState<string[]>(initialMqRowDescriptions);\n  const [fulfilment, setFulfilment] = React.useState<number[]>(initialFulfilment);\n  const [reset, setReset] = React.useState<number>(0);\n\n  return (\n    <>\n      <Form.Provider\n        onFormChange={(name, info) => {\n          let totalKpi = 0;\n          let totalWeightsKpi = 0;\n          let sumKpi = 0;\n\n          let totalPi = 0;\n          let totalWeightsPi = 0;\n          let sumPi = 0;\n\n          const newMqRowDescriptions = [];\n          const newFulfilment: number[] = [];\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          for (const [_formName, form] of Object.entries(info.forms)) {\n            if (form.getFieldValue(\"active\")) {\n              const actualValue = form.getFieldValue(\"actualValue\") || 0;\n              const targetValue = form.getFieldValue(\"targetValue\");\n              if (Number.isFinite(form.getFieldValue(\"actualValue\"))) {\n                let qi = 1;\n                if (!Number.isFinite(targetValue) || targetValue === 0) {\n                  qi = 1;\n                } else if (actualValue > targetValue) {\n                  qi = targetValue / actualValue;\n                } else if (actualValue <= targetValue) {\n                  qi = actualValue / targetValue;\n                } else {\n                  console.error(\"Something went wrong in aggregation calculation!\");\n                }\n                if (form.getFieldValue(\"step\") === \"KPI\") {\n                  if (qi <= 0.5) {\n                    totalKpi += qi * 1.3;\n                    totalWeightsKpi += 1.3;\n                  } else {\n                    totalKpi += qi;\n                    totalWeightsKpi += 1;\n                  }\n\n                  if (totalWeightsKpi) {\n                    sumKpi = totalKpi / totalWeightsKpi;\n                  }\n                } else if (form.getFieldValue(\"step\") === \"PI\") {\n                  if (qi <= 0.5) {\n                    totalPi += qi * 1.3;\n                    totalWeightsPi += 1.3;\n                  } else {\n                    totalPi += qi;\n                    totalWeightsPi += 1;\n                  }\n\n                  if (totalWeightsPi) {\n                    sumPi = totalPi / totalWeightsPi;\n                  }\n                }\n              }\n              newFulfilment.push(calculateFulfilment(actualValue || 0, targetValue || 0));\n\n              setFulfilment(newFulfilment);\n\n              newMqRowDescriptions.push(form.getFieldValue(\"description\"));\n            }\n          }\n\n          const newSum = sumKpi * 0.66 + sumPi * 0.33;\n          setAggregationSum(newSum);\n          setMqRowDescriptions(newMqRowDescriptions);\n\n          props.onAggregationChange(newSum);\n        }}\n      >\n        <div>\n          <div\n            style={{\n              marginBottom: 4,\n              fontWeight: \"bold\",\n              textDecoration: \"underline\"\n            }}\n          >\n            {props.perspective}\n          </div>\n\n          <div\n            style={{\n              display: \"grid\",\n              gridTemplateColumns: \"70% auto\"\n            }}\n          >\n            <div>\n              <div\n                style={{\n                  display: \"grid\",\n                  gridTemplateColumns: `repeat(${props.columns.length}, 1fr)`,\n                  justifyItems: \"center\",\n                  columnGap: 16,\n                  marginTop: 40,\n                  marginBottom: 24\n                }}\n              >\n                {props.columns.map((column, index) => {\n                  return (\n                    <span style={{ fontWeight: \"bold\", marginLeft: 5, marginRight: 5 }} key={index}>\n                      {column}\n                    </span>\n                  );\n                })}\n              </div>\n              {Array.from({ length: props.kpiRowCount }, (x, i) => i).map((row, i) => {\n                return (\n                  <TableMQRow\n                    key={row}\n                    row={row}\n                    isKpiRow={true}\n                    step=\"KPI\"\n                    defaultValueName={props.defaultValueName[i]}\n                    defaultValueTarget={props.defaultValueTarget[i]}\n                    tableID={props.tableID}\n                    perspective={props.perspective}\n                    reset={reset}\n                  />\n                );\n              })}\n\n              {Array.from({ length: props.piRowCount }, (x, i) => props.kpiRowCount + i).map((row) => {\n                return (\n                  <TableMQRow\n                    key={row}\n                    row={row}\n                    isKpiRow={false}\n                    step=\"PI\"\n                    defaultValueName={props.defaultValueName[row]}\n                    tableID={props.tableID}\n                    perspective={props.perspective}\n                    reset={reset}\n                  />\n                );\n              })}\n              <div style={{ marginTop: 20 }}>Aggregation: {aggregationSum.toFixed(2)} </div>\n              <div style={{ textAlign: \"center\", marginTop: 4 }}>\n                {props.tableLegend.map((term, index) => {\n                  return (\n                    <span\n                      style={{ fontSize: 10, overflow: \"hidden\", textOverflow: \"ellipsis\", width: \" 100%\" }}\n                      key={index}\n                    >\n                      {term.shortcut + \"...\" + term.name + \", \"}\n                    </span>\n                  );\n                })}\n              </div>\n              <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n                <Popconfirm\n                  icon={<WarningOutlined style={{ color: \"red\" }} />}\n                  title=\"Wollen Sie die Werte dieser Perspektive wirklich zurücksetzen?\"\n                  okText=\"OK\"\n                  cancelText=\"Abbrechen\"\n                  onConfirm={() => {\n                    setAggregationSum(0);\n                    setMqRowDescriptions(initialMqRowDescriptions);\n                    setFulfilment(initialFulfilment);\n                    setReset(reset + 1);\n    \n                    props.onAggregationChange(0);\n                    message.success(\"Daten wurden erfolgreich zurückgesetzt!\");\n                  }}\n                >\n                  <Button type=\"text\" danger style={{ marginRight: 16, marginTop: 24 }}>\n                    Zurücksetzen\n                  </Button>\n                </Popconfirm>\n              </div>\n            </div>\n\n            <Chart\n              // Perspective Chart\n              options={{\n                chart: {\n                  id: \"perspective-chart\"\n                },\n                xaxis: {\n                  categories: mqRowDescriptions,\n                  labels: {\n                    show: true,\n                    style: {\n                      colors: [\"#000\", \"#000\", \"#000\", \"#000\", \"#000\", \"#000\"],\n                      fontSize: \"12px\"\n                    }\n                  }\n                },\n                yaxis: {\n                  forceNiceScale: true,\n                  min: 0,\n                  max: 95,\n                  labels: {\n                    maxWidth: 1,\n                    style: {\n                      colors: [\"#000\"]\n                    },\n                    formatter: function (val, index) {\n                      return val.toFixed(2);\n                    }\n                  }\n                },\n                legend: {\n                  showForSingleSeries: true,\n                  markers: {\n                    fillColors: [\"#FFE000\"]\n                  }\n                },\n                stroke: {\n                  show: true,\n                  colors: [\"#FFE000\"]\n                },\n                fill: {\n                  colors: [\"#FFE000\"],\n                  opacity: 0.1\n                },\n                markers: {\n                  size: 4,\n                  colors: [\"#FFE000\"],\n                  hover: {\n                    size: 6\n                  }\n                },\n                plotOptions: {\n                  radar: {\n                    size: 140,\n                    polygons: {\n                      strokeColors: \"#9D9F9E\",\n                      connectorColors: \"#9D9F9E\"\n                    }\n                  }\n                },\n                title: {\n                  text: `${props.perspective} Diagramm`,\n                  align: \"center\",\n\n                  style: {\n                    fontSize: \"14px\"\n                  }\n                }\n              }}\n              series={[\n                {\n                  name: `Erfüllungsgrad, [%]`,\n                  data: fulfilment\n                }\n              ]}\n              type=\"radar\"\n              width=\"700\"\n              height=\"400\"\n              key={reset + \"b\"}\n            />\n          </div>\n        </div>\n\n        <Divider />\n      </Form.Provider>\n    </>\n  );\n}\n","import { Form, Card, Button } from \"antd\";\nimport React from \"react\";\nimport { CSV } from \"../CSV\";\nimport { TableMQPerspective } from \"./TableMQPerspective\";\nimport { StarFilled, DownloadOutlined, UploadOutlined } from \"@ant-design/icons\";\n\nexport function TableMQ(props: {\n  title: string;\n  description: React.ReactNode;\n  backgroundColor: string;\n  columns: string[];\n  resultTitle: string;\n  resultInitials: string;\n  maturityWeight: number;\n  tableID: string;\n  onQualityLevelChange(value: number): void;\n}) {\n  const [aggregationPerspective1, setAggregationPerspective1] = React.useState<number>(0);\n  const [aggregationPerspective2, setAggregationPerspective2] = React.useState<number>(0);\n  const [aggregationPerspective3, setAggregationPerspective3] = React.useState<number>(0);\n  const [aggregationPerspective4, setAggregationPerspective4] = React.useState<number>(0);\n  const [mqMetric, setMqMetric] = React.useState<number>(0);\n\n  React.useEffect(() => {\n    setMqMetric(calculateMqMetric());\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n}, [aggregationPerspective1, aggregationPerspective2, aggregationPerspective3, aggregationPerspective4]);\n\n  React.useEffect(() => {\n    props.onQualityLevelChange(mqMetric * props.maturityWeight);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [mqMetric, props.maturityWeight]);\n\n  const calculateMqMetric = () => {\n    let mqMetric = 0;\n    mqMetric =\n      (aggregationPerspective1 + aggregationPerspective2 + aggregationPerspective3 + aggregationPerspective4) / 4;\n    console.log(\"aggr\", aggregationPerspective1, aggregationPerspective2);\n    return mqMetric;\n  };\n\n  const colorIcon = () => {\n    let mqMetric = 0;\n    let iconColor = \"#FFFFFF\";\n\n    mqMetric =\n      (aggregationPerspective1 + aggregationPerspective2 + aggregationPerspective3 + aggregationPerspective4) / 4;\n    if (mqMetric <= 0.5) {\n      return (iconColor = \"#FF0000\");\n    } else if (0.51 < mqMetric && mqMetric <= 0.66) {\n      return (iconColor = \"#ff8e03\");\n    } else if (0.67 < mqMetric && mqMetric <= 0.82) {\n      return (iconColor = \"#FFE000\");\n    } else if (0.83 < mqMetric && mqMetric <= 1.03) {\n      return (iconColor = \"#4EEE94\");\n    } else {\n      return iconColor;\n    }\n  };\n\n  return (\n    <div\n      style={{\n        textAlign: \"center\",\n        backgroundColor: props.backgroundColor,\n        padding: 40,\n        marginTop: 40\n      }}\n    >\n      <h1 style={{ textTransform: \"uppercase\" }}>{props.title}</h1>\n      <p>{props.description}</p>\n      <div style={{ justifyContent: \"flex-end\", display: \"flex\", marginTop: 16 }}>\n        <span style={{ textAlign: \"center\", marginRight: 20, marginTop: 10 }}>.csv</span>\n        <Button type=\"primary\" icon={<DownloadOutlined />} size={\"large\"} style={{ marginRight: 16 }} />\n        <Button type=\"primary\" icon={<UploadOutlined />} size={\"large\"} />\n      </div>\n\n      <Form.Provider\n        onFormChange={(name, info) => {\n          props.onQualityLevelChange(mqMetric * props.maturityWeight);\n        }}\n      >\n        <div style={{ marginTop: 24 }}>\n          <TableMQPerspective\n            perspective={\"Maschinenperspektive\"}\n            tableID={props.tableID}\n            columns={props.columns}\n            kpiRowCount={2}\n            defaultValueName={[\"Rss,ugep\", \"OEE\", \"PI Name 1\", \"PI Name 2\", \"PI Name 3\"]}\n            defaultValueTarget={[20, 85]}\n            piRowCount={3}\n            defaultValuePIName={\"PI Name\"}\n            tableLegend={[\n              { shortcut: \"Rss,ugep\", name: \"Ratio ungeplante Stillstandzeit\" },\n              { shortcut: \"OEE\", name: \"Overall Equipment Effectiveness\" }\n            ]}\n            onAggregationChange={(value) => {\n              setAggregationPerspective1(value);\n            }}\n          />\n\n          <TableMQPerspective\n            perspective={\"Prozessperspektive\"}\n            tableID={props.tableID}\n            columns={props.columns}\n            kpiRowCount={3}\n            defaultValueName={[\"Riha,ugep\", \"EGiha,ugep\", \"EGiha,gep\", \"PI Name 1\", \"PI Name 2\", \"PI Name 3\"]}\n            defaultValueTarget={[10, 75, 90]}\n            piRowCount={3}\n            defaultValuePIName={\"PI Name\"}\n            tableLegend={[\n              { shortcut: \"Riha,ugep\", name: \"Ratio Instandhaltungsaufträge ungeplant\" },\n              { shortcut: \"EGiha,ugep\", name: \"Erfüllungsgrad ungeplanter Instandhaltungsaufträge\" },\n              { shortcut: \"EGiha,gep\", name: \"Erfüllungsgrad geplanter Instandhaltungsaufträge\" }\n            ]}\n            onAggregationChange={(value) => {\n              setAggregationPerspective2(value);\n            }}\n          />\n          {/* <TableMQPerspective\n            perspective={\"Kostenperspektive\"}\n            tableID={props.tableID}\n            columns={props.columns}\n            kpiRowCount={2}\n            defaultValueName={[\"Rihk,ugep\", \"Rihk,personal\", \"PI Name 1\", \"PI Name 2\", \"PI Name 3\"]}\n            defaultValueTarget={[15, 10]}\n            piRowCount={3}\n            defaultValuePIName={\"PI Name\"}\n            tableLegend={[\n              { shortcut: \"Rihk,ugep\", name: \"Ratio Instandhaltungskosten ungeplant\" },\n              { shortcut: \"Rihk,personal\", name: \"Instandhaltungspersonalksoten-Ratio\" }\n            ]}\n            onAggregationChange={(value) => {\n              setAggregationPerspective3(value);\n            }}\n            onReset={(value) => {\n              setMqMetric(calculateMqMetric());\n            }}\n          />\n          <TableMQPerspective\n            perspective={\"Ressourcenperspektive\"}\n            tableID={props.tableID}\n            columns={props.columns}\n            kpiRowCount={1}\n            defaultValueName={[\"PS,ugep\", \"PI Name 1\", \"PI Name 2\", \"PI Name 3\"]}\n            defaultValueTarget={[15]}\n            piRowCount={3}\n            defaultValuePIName={\"PI Name\"}\n            tableLegend={[{ shortcut: \"PS,ugep\", name: \"geleistete Personenstunden der ungeplanten Instandhaltung\" }]}\n            onAggregationChange={(value) => {\n              setAggregationPerspective4(value);\n            }}\n            onReset={(value) => {\n              setMqMetric(calculateMqMetric());\n            }}\n          /> */}\n        </div>\n      </Form.Provider>\n\n      <Card style={{ width: 300, margin: \"auto\" }} title={props.resultTitle}>\n        <span style={{ margin: 0 }}>\n          {props.resultInitials} = {mqMetric.toFixed(2)}\n        </span>\n        <span style={{ marginLeft: 8 }}>\n          <StarFilled style={{ color: colorIcon() }} />\n        </span>\n      </Card>\n    </div>\n  );\n}\n","import React from \"react\";\n\nconst Footer = () => {\n  return (\n    <>\n      <footer style={{ padding: 16, fontSize: \"0.5rem\" }}>\n        <div>{/* put some more Info about the Tool here? */}</div>\n      </footer>\n    </>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\n\nimport Introbox from \"./components/Introbox\";\nimport Result from \"./components/Result\";\n\nimport \"./App.css\";\nimport { Table } from \"./components/table/Table\";\nimport { TableMQ } from \"./components/table/TableMQ\";\nimport Footer from \"./components/Footer\";\n\nfunction App() {\n  const [weightedMetricDQ, setWeightedMetricDQ] = React.useState<number>(0);\n  const [weightedMetricIQ, setWeightedMetricIQ] = React.useState<number>(0);\n  const [weightedMetricKQ, setWeightedMetricKQ] = React.useState<number>(0);\n  const [weightedMetricMQ, setWeightedMetricMQ] = React.useState<number>(0);\n\n  return (\n    <>\n      <Introbox />\n      <Table\n        title=\"Datenqualitätsindikatoren\"\n        sourceTitle=\"Datenquellen\"\n        sourceInputPlaceholder=\"Datenquelle\"\n        description={\n          <>\n            Bitte geben Sie die Datenqualitätsindikatoren gemäß Ihrer Auswertung ein.\n            <br /> Es werden Zahlen mit zwei Nachkommastellen zwischen Null und Eins akzeptiert. <br /> Quellen können\n            selbst benannt werden.\n          </>\n        }\n        backgroundColor=\"#e6f5ff\"\n        columns={[\n          { name: \"Korrektheit\", weight: 0.18 },\n          { name: \"Validität\", weight: 0.09 },\n          { name: \"Provenienz\", weight: 0.08 },\n          { name: \"Vollständigkeit\", weight: 0.13 },\n          { name: \"Verfügbarkeit\", weight: 0.14 },\n          { name: \"Granularität\", weight: 0.09 },\n          { name: \"Einzigartigkeit\", weight: 0.02 },\n          { name: \"System-Konsistenz\", weight: 0.16 },\n          { name: \"Zugänglichkeit\", weight: 0.06 },\n          { name: \"Pünktlichkeit\", weight: 0.07 }\n        ]}\n        resultTitle=\"Ergebnis Datenqualität:\"\n        resultInitials=\"DQ\"\n        rowsCount={15}\n        tableID=\"dq\"\n        tableLegend={[]}\n        maturityWeight={0.36}\n        onQualityLevelChange={(value) => {\n          setWeightedMetricDQ(value);\n        }}\n      />\n\n      <Table\n        title=\"Informationsqualitätsindikatoren\"\n        sourceTitle=\"Informationsquellen\"\n        sourceInputPlaceholder=\"Infoquelle\"\n        description={\n          <>\n            Bitte geben Sie die Informationsqualitätsindikatoren gemäß Ihrer Auswertung ein.\n            <br /> Es werden Zahlen mit zwei Nachkommastellen zwischen Null und Eins akzeptiert. <br /> Quellen können\n            selbst benannt werden.\n          </>\n        }\n        backgroundColor=\"#dbf1ff\"\n        columns={[\n          { name: \"Korrektheit\", weight: 0.2 },\n          { name: \"Validität\", weight: 0.14 },\n          { name: \"Erklärbarkeit\", weight: 0.09 },\n          { name: \"Aktualität\", weight: 0.14 },\n          { name: \"Prägnanz\", weight: 0.02 },\n          { name: \"Vollständigkeit\", weight: 0.15 },\n          { name: \"Pünktlichkeit\", weight: 0.12 },\n          { name: \"Zweckmäßigkeit\", weight: 0.07 },\n          { name: \"Informationsfluss\", weight: 0.06 }\n        ]}\n        resultTitle=\"Ergebnis Informationsqualität:\"\n        resultInitials=\"IQ\"\n        rowsCount={15}\n        tableID=\"iq\"\n        tableLegend={[]}\n        maturityWeight={0.23}\n        onQualityLevelChange={(value) => {\n          setWeightedMetricIQ(value);\n        }}\n      />\n\n      <Table\n        title=\"Wissensqualitätsindikatoren\"\n        sourceTitle=\"Wissensquellen\"\n        sourceInputPlaceholder=\"Wissensquelle\"\n        description={\n          <>\n            Bitte geben Sie die Wissensqualitätsindikatoren gemäß Ihrer Auswertung ein.\n            <br /> Es werden Zahlen mit zwei Nachkommastellen zwischen Null und Eins akzeptiert. <br /> Quellen können\n            selbst benannt werden.\n          </>\n        }\n        backgroundColor=\"#e6f5ff\"\n        columns={[\n          { name: \"BnKQ,k\", weight: 0.18 },\n          { name: \"EnKQ,k\", weight: 0.31 },\n          { name: \"LeKQ,k\", weight: 0.31 },\n          { name: \"ZwKQ\", weight: 0.21 }\n        ]}\n        resultTitle=\"Ergebnis Wissensqualität:\"\n        resultInitials=\"KQ\"\n        rowsCount={15}\n        tableID=\"kq\"\n        tableLegend={[\n          { shortcut: \"BnKQ,k\", name: \"Bildungsniveau eines Mitarbeiters\" },\n          { shortcut: \"EnKQ,k\", name: \"Erfahrungsniveau eines Mitarbeiters\" },\n          { shortcut: \"LeKQ,k\", name: \"Leistungsniveau eines Mitarbeiters\" },\n          { shortcut: \"ZwKQ\", name: \"Zweckmäßigkeit eines IT-Systems zur Wissensbereitstellung\" }\n        ]}\n        maturityWeight={0.28}\n        onQualityLevelChange={(value) => {\n          setWeightedMetricKQ(value);\n        }}\n      />\n\n      <TableMQ\n        title=\"Instandhaltungsqualitätsindikatoren\"\n        description={\n          <>\n            Bitte geben Sie die Instandhaltungsqualitätsindikatoren gemäß Ihrer Auswertung ein.\n            <br /> Für Prozentangaben werden ganze Zahlen zwischen Null und 100 akzeptiert.\n            <br /> PI Kennzahlen können selbst benannt werden.\n          </>\n        }\n        backgroundColor=\"#dbf1ff\"\n        columns={[\"An/Aus\", \"Stufe\", \"Kennzahl\", \"Ist, [%]\", \"Soll, [%]\", \"Erfüllungsgrad\"]}\n        resultTitle=\"Ergebnis Instandhaltungsqualität:\"\n        resultInitials=\"MQ\"\n        maturityWeight={0.13}\n        tableID=\"mq\"\n        onQualityLevelChange={(value) => {\n          setWeightedMetricMQ(value);\n        }}\n      />\n\n      <Result maturityLevel={weightedMetricDQ + weightedMetricIQ + weightedMetricKQ + weightedMetricMQ} />\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"antd/dist/antd.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}